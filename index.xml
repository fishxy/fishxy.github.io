<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>一起摸鱼</title><link>https://fishxy.github.io/</link><description>Recent content on 一起摸鱼</description><generator>Hugo -- gohugo.io</generator><language>en</language><lastBuildDate>Thu, 16 Apr 2020 00:00:00 +0000</lastBuildDate><atom:link href="https://fishxy.github.io/index.xml" rel="self" type="application/rss+xml"/><item><title>0416-SaaS产品迷思</title><link>https://fishxy.github.io/post/product/saas%E4%BA%A7%E5%93%81%E7%96%91%E9%97%AE/</link><pubDate>Thu, 16 Apr 2020 00:00:00 +0000</pubDate><guid>https://fishxy.github.io/post/product/saas%E4%BA%A7%E5%93%81%E7%96%91%E9%97%AE/</guid><description>&lt;p>之前有在这篇文章中聊过关于国内乙方定制化项目的问题 &lt;a href="../0709-%E4%B8%BA%E4%BB%80%E4%B9%88%E5%9B%BD%E5%86%85%E5%AE%9A%E5%88%B6%E5%8C%96%E9%A1%B9%E7%9B%AE%E8%B5%9A%E9%92%B1%E9%9A%BE">0709-为什么国内定制化项目赚钱难&lt;/a>，最近面试也跟做 SaaS 的前辈料到了这个问题 —— 在 B 端企业 SaaS 化的进程中，怎么去平衡客制化需求和 SaaS 产品化需求；为什么过去的 B 端企业近两年都在进行 SaaS、上云，其中对他们有什么改变呢？&lt;/p>
&lt;p>首先说第一点，B 端企业怎么平衡客制化需求？对于不同阶段公司，由于客户的体量、利润等原因，SaaS 企业往往会沦为被动局面，也就是我们通常说的甲方是乙方爸爸，乙方产品化需求不断挤压，沦为甲方的需求实施方。&lt;/p>
&lt;p>这在我过去乙方公司的经验，以及近期面试和跟前辈交流过程中提炼了一些关键点，也正是这些关键点，决定了 SaaS 企业的能否摆脱实施的难题。&lt;/p>
&lt;ol>
&lt;li>
&lt;p>主动选择客户&lt;/p>
&lt;p>这一点是在面试时跟面试官交流时了解到的，而我之前从来没有考虑过要主动选择客户这一点。在我之前的认知里，是客户占据主动选择权，而企业为了利润巨大化，应该覆盖越多的客户越好。然而这样就会面临早期的问题，企业覆盖的客户越多，个性化需求也就越多，但本身企业的精力又是有限的，这样为了争取头部用户的订单就会优先对待不同客户，这样本质上来说覆盖更多的客户又失去了意义。&lt;/p>
&lt;p>此外，众所周知美国的 ToB 软件行业是很成熟的，在企业服务企业中 Salesforce 是美国一家 CRM 工具的领导者，全美的企业那么多，然而 Salesforce 也只是服务了 150000 多家，因此 SaaS 企业在服务客户的过程中，也是一个主动选择、筛选客户的过程，不断筛选优质客户，促进客户的续约、复购。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>坚持 SaaS 商业模式&lt;/p>
&lt;p>传统项目实施、乙方公司，利润的获取模式是，投标-&amp;gt;中标-&amp;gt;签订合同-&amp;gt;项目实施-&amp;gt;验收，在项目的不同阶段进行不同比例的款项收取，利润也就是一次合同费用，服务或企业更新产品后又要再一次进行投标……流程，不存在复购或续约的情况，每一次迭代、更新都是重新 0-1 搭建，定制化产品的过程。那这样就存在传统实施方的明显问题，每次都要投入重复的成本资源，而且项目制的利润浮动会很大，做不好就亏损的情况很正常。&lt;/p>
&lt;p>SaaS 模式相比于传统实施项目，一次迭代服务多个客户，省去持久化部署的成本，而且有持续稳定的现金流，作为 SaaS 企业通常是产品、收益导向，因为一家常熟的 SaaS 企业 70% 左右收入来源于老客户续约，所以提供给老客户优质的产品才能促使老客户不断续约复购。且对于 SaaS 企业来说，节省下来的重复开发、部署成本可以投入到更多的主动服务和技术支持上，而不必作为被动响应的救火队。更主要的是，由于采取了 SaaS/ 上云的模式，企业能够拥有更多、更全面的客户数据作为分析决策的依据，从而提前识别客户问题、更新迭代产品。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>坚持做技术与产品的创新&lt;/p>
&lt;p>当然最重要的一点就是要坚持产品和技术上的创新，对于国内软件行业来说，同质化十分严重，而作为 ToB 产品的企业，并不完全比拼的是客户占用量、销售能力，相比我认为更重要的还是需要专注于产品和技术本身上的打磨。&lt;/p>
&lt;p>一方面是作为 SaaS 产品，要将产品的对客户的普遍性需求做好，另一方面作为 ToB 产品，需要由点及面，从某个场景入手覆盖行业链条，此外更重要的一点是要能在行业中走到客户前面，针对不同行业提供更深入的能力。&lt;/p>
&lt;/li>
&lt;/ol>
&lt;p>SaaS 作为一种架构模式在一定程度上解决了过去不同项目实施、持久化部署的大量重复成本，同时也提供了一种新的获客盈利模式，我们从过去关注合同利润、履约能力等方面转而关注产品增长、续签和运营效率；关注服务的行业份额规模、天花板有多高，同时从过去堆放项目实施人力角度调整到专注产品打磨、品牌沉淀上。企业和客户的关系不再是“一锤子买卖”，而是一个深度链接，注重服务于体验的关系，所以提升产品和服务质量是产品增长的基础。&lt;/p></description></item><item><title>201912-202003总结</title><link>https://fishxy.github.io/post/diary/201912202003%E6%80%BB%E7%BB%93/</link><pubDate>Mon, 23 Mar 2020 00:00:00 +0000</pubDate><guid>https://fishxy.github.io/post/diary/201912202003%E6%80%BB%E7%BB%93/</guid><description>&lt;p>距离上次更新博客已经过去了 4 个月，当然这段时间不光是身边还是自己身上也发生了很多事，单就写作这件事来说，拖得越久就越不会有动力去拾起来，所以还是回归本质——复盘！不能再拖了！&lt;/p>
&lt;h1 id="博客">博客&lt;/h1>
&lt;p>3 月初发现去年买的 fishhub 域名到期了，续费费用直接从 &lt;code>0.99$&lt;/code> 涨到了 &lt;code>10.99$&lt;/code>，本着小博客没什么固定域名的想法，我又在 namesilo 上买了一个 &lt;code>0.99$&lt;/code> 的便宜域名使用，不过带来的问题就是，google 搜索的 SEO 都失效了，需要重新创建词条，重新绑定 search Console。与此同时，想着顺便把 hugo 版本更新，期间又遇到了更新后主页文章没法解析的问题，最后发现是主题没有同步更新。&lt;/p>
&lt;p>最终博客现在呈现的就是这个样子，用的 hugo，wercker 的自动构建/部署，github page 的托管，加了 share.js、douban shorcode 插件，评论用的 valine.js + leancloud。&lt;/p>
&lt;p>所以这套简单的东西满足我基本需求的就够了，真正的重点还是要持续输出。&lt;/p>
&lt;h1 id="工作">工作&lt;/h1>
&lt;p>自 11 月以来工作上的变化真的是太大了，这期间经历了部门合并、业务削减被砍、借调、前 leader 离职以及到现在坚持做了一段时间其他方向的业务，总结下每天对自己都是考验。&lt;/p>
&lt;p>12 月初期，我先前所做的产品接到了明确通知会被砍掉，团队也并入了另外一个核心部门，但是结果是团队成员被拆分，逐渐边缘化。而我个人，则是由于业务被砍，被安排去做另外的业务——一项我个人并不感兴趣的业务，碍于对自己能力和工作年限的考虑，我决定保守起见还是留在新团队里争取学习到一些新的东西。在新团队我没有与 leader 主动进行沟通，所以也并不清楚为什么会安排我做这块业务，而我所想到的原因会有几个，1 是原有业务已经被砍掉，短期不会再有同类的业务开展；2 是其他业务的人员固定，不会考虑再投入额外的人员；3 是我作为被吞并的一方，其实并没有太多的选择。当然最主要的原因，我认为还是对自己能力的不自信，所以没有争取其他机会。&lt;/p>
&lt;p>于是在进入新组后我立马接手了一个自己并不感兴趣，也不觉得会有成绩的产品。在边学习边熟悉的过程中度日如年。就这样度过了漫长的第一周，leader 通知我被借调到其他组一段时间，然后我在年前放假前就一直流落在其他组。再加上中间我的前 leader 离职，把现在团队里最棘手的事情交接给了我，我开始不断怀疑在这家公司还能给自己带来什么成长和帮助。期间还是对自己所做的东西和事情产生了怀疑，我可以接受工作繁忙，但是我却接受不了没有成长，不断纠结中我尝试寻求外面的机会……&lt;/p>
&lt;p>到放假前自己都没有完全准备好要离职，最终想着年后回来再提，结果直到放假后疫情爆发，让自己意识到抗风险能力是有多么脆弱，不但公司复工形式影响、用人单位 hc 缩减，最主要的还是打乱了自己整体的计划。陆陆续续的面试了一些公司，回头复盘发现自己能力欠缺的太多了，拿的 offer 没有竞争力，想去的又拿不下 offer……&lt;/p>
&lt;p>反思一下，自己在工作年限上算是变动频繁的了，而且前后两家做的业务关联性不大，导致了实际做的业务深度并不够，而岗位核心竞争力更多还是对业务的理解深度；另外一个对自己的定位不明确，再被问到后续规划上自己其实是比较模糊的，这可能也是由于第一个原因，由于自己接触的业务太多，导致没有想好自己真的想朝哪个方向发展；最后一个就是自己做了太多的执行层面的工作，而在管理上的成长不够，对于三年这个节点，成长快的同学已经迈入了管理层，而我还在边缘游荡。&lt;/p>
&lt;p>时间已经快迈入 4 月份了，自己下一份的工作还是没有归属，这次疫情带来的影响，或者其实感谢这次，暴露出了自己的不足，希望自己清醒后快速成长，能够在这个月确定好未来的方向和工作吧。&lt;/p>
&lt;h1 id="考研">考研&lt;/h1>
&lt;p>这里要提的就是我在 10 月底的时候搭乘末班车，报了央财的 MBA 统考，由于是临时起意，之前也没有参与提前批的面试，所以想的就是走一遍过场，看一下考试难度，为后续规划做一个参考模拟。自己也是半工半读，每天下了班以后看看书，做做题进行复习，复习的教材也就是在网上搜了《逻辑精点》、《数学精点》旧版 PDF 过了一遍，英语选择的就是白天有时间就背背单词，最后也没有背完 3000 词的课本，只背了 1400 个左右。然后参考室友的推荐，买了两科的真题做了几套。就这样拖拖拉拉的持续到考试那天。&lt;/p>
&lt;p>记得那天周六，其实是我们公司的工作日，我为了去参加考试，那周提前请了假说是去“参加同学婚礼”。&lt;/p>
&lt;p>也许是因为自己就没有以完全认真的心态对待，也许是认为自己这次肯定也考不上，总之自己那天去的心情就是很轻松、没有什么压力，看着同考场都是大我 5 岁以上的考生，我并没有觉得自己多么有优势，而是在想这些人在管理上一定比我有经验，如果同样条件下，他们的竞争力一定比我要有优势。总之自己以一个局外人、重在参与的心态参加完了考试。&lt;/p>
&lt;p>考的两科管综和英语，上午的管综最后还是有些题没有答完，随便蒙了一些选项，英语倒是超出了自己的预期。考试结束后感觉整体试卷的难度确实没有想象中的大，但回顾一下复习的历程，自己没有在复习中保持一个考试的状态。例如在答真题时还是一边刷着电脑，一边答着题，在答题速度上没有进行针对性训练，最终也在正式考试上暴露了这一问题；英语这块对于自己这种基础差的选手，单词量提高上来是见效最快的方式，当然也不排除这次的题目比较简单。&lt;/p>
&lt;p>跟上学时的状态一样，考完试的第二周看到网上流出答案，我就迫不及待的拿出写好的答题记录核对起来，估算了自己管综大概 110~120 左右，英语在 45 以上的分数，所以整体也就是高于 155 的样子，联想到往年的分数线都是 165 起，我也告诉自己，本来就是重在参与的，不用多想，好好准备下一年的考试吧。这样的状态持续到了 3 月初，研招网推送了考研初试的成绩公布的通知，本着看看自己到底什么水平的想法，我登录了研招网一探究竟，于是就查到了管综 117、英语二 57，总分 174 的成绩。看到这个成绩的我人傻了，174 分，我想到了央财去年正常批复试分数线是 175，仅仅差了 1 分。&lt;/p>
&lt;p>我想自己本就打算以一个走个流程熟悉熟悉的方式参与考试，如果考的特别差，我是可以接受的，因为也没有拼尽全力；如果自己考得特别好，成绩特别高我也能接受，那说明这个考试确实没什么压力，自己就全力准备复试。然而恰恰是自己考到了分数线附近，仅仅差了 1 分，一方面想说的是，也确实是这个考试对于自己的压力、难度不大；另一方面也确实是由于自己态度没有认真、没有拼尽全力，导致了就差了可能那一两个选择题的分数，正如我前文提到，由于自己的不认真和不紧张，早期没有在答题速度上投入时间修炼，才造成了现在这种结果。这个分数是鼓励，鼓励自己能够完全应付得来这种考试难度，另一方面也是鞭策，鞭策自己对待事情的态度一定要认真，不能太随便。&lt;/p>
&lt;p>最近又看到了关于研究生扩招的信息，自己也在时刻关注分数线预测、国家线公布这类话题，总而言之，由于自己前期复习的一点点松懈，导致现在必须时刻紧张准备好复试的内容，也希望幸运女神还能眷顾自己，让自己在毕业三年这个节点，最高性价比的时候成功上岸。&lt;/p>
&lt;p>希望 4 月中旬公布国家线，复试通过，有个好消息更新到博客里来！&lt;/p>
&lt;h1 id="疫情">疫情&lt;/h1>
&lt;p>12 月的首例到现在已经过去 4 个月了，年前还健身踢球的，现在只能宅在家里俯卧撑；年前约好的聚会，现在只能云约酒了……&lt;/p>
&lt;p>关于疫情感触最深的几个方面还是要：&lt;/p>
&lt;ol>
&lt;li>要有能够获取信息的能力，更要拥有明辨是非的能力，信息来源多而杂，造谣成本也低，究竟如何分辨真伪才是重要的&lt;/li>
&lt;li>提高抗风险意识，疫情导致人流下降，餐饮、娱乐，太多中小企业受到影响，尤其是个体户这一类的，断了全家的经济来源，抗风险能力几乎为零&lt;/li>
&lt;li>对各种情况做好最坏的打算，做好理财储蓄，在做足了最坏打算的基础上为自己想好各种出路，以便真的有情况发生能够维持基本的生活&lt;/li>
&lt;li>家人、健康最重要，保持身体健康，保持良好的作息，锻炼习惯最重要&lt;/li>
&lt;/ol>
&lt;p>关于其他的就不谈了，这次创造也改变了太多历史情况，希望这次全球的病毒灾难早点过去，希望自己和大家都能从这次公共卫生事件中经验教训。&lt;/p>
&lt;h1 id="身体">身体&lt;/h1>
&lt;p>最后说一说身体情况吧，1 月份封禁戒严前还坚持去了几次健身房，到了 2 月份开始宅在家里吃着外卖，也没有运动，导致热量盈余体重上升。最近慢慢开始在家里恢复起了健身，不过毕竟没有在健身房自在，而且设备上也有很大的差距，所以只能算是一个维持状态吧。也是由于疫情宅在家里的原因，年底半月板的伤已经好的差不多了，可以慢慢接受一些跑跳动作，这也算是个好消息。&lt;/p>
&lt;p>5 月份的斯巴达看样子也要推迟了，话说回来，如果不推迟的话，我目前的身体状态恐怕也坚持不到完赛……&lt;/p>
&lt;p>还有，希望下个月开始能够改掉一些陋习吧(txtx&lt;/p></description></item><item><title>201910&amp;11 月总结</title><link>https://fishxy.github.io/post/diary/20191011%E6%80%BB%E7%BB%93/</link><pubDate>Sun, 03 Nov 2019 00:00:00 +0000</pubDate><guid>https://fishxy.github.io/post/diary/20191011%E6%80%BB%E7%BB%93/</guid><description>&lt;p>这个月事情太多，都没腾出空来写总结。 ——20191111&lt;/p>
&lt;hr>
&lt;p>今天是 2019年12月09日，终于想了想还是要把月度总结写了，不然再拖下去真就从一开始的“抽不出时间写”演变成“有时间也不写”了。&lt;/p>
&lt;p>回顾过去的两个月时间，应该是度过了工作以来最迷茫、最无助的两个月，经历了裁员、削减资源、业务被砍、组织架构调整等等事情，我也开始陷入了对自己的深深怀疑。潮水退去方知谁在裸泳，互联网的下半场，趋势下的不景气，许多人也沦为了小小的牺牲品，转念一想，我们跟过去的工人有什么区别呢？尽管数据统计国内仅有 4% 的人接受过本科教育，但这 4% 并不能说明个体与其他的不同，同时教育的意义似乎也是为了培养大批坐在办公室的员工而存在的。关于教育的意义我所知不多，这也仅仅是一个小小的看法。聊回主题，这两个月由于处在了很少事情做和无事可做的中间态，也就闲下了很多时间来思考，或者说更多的是迷茫——不知道未来做什么、不知道未来能做什么，公司的核心竞争力、我的核心竞争力是什么呢？如果说这次被裁的有我或者说，我下一份工作要做什么呢？很多问题困扰着我。&lt;/p>
&lt;p>这种状态一直延续到这个月，我又被调离了原来的组织，换到了新的部门和团队，这次我们原来的团队都被打散，直白的说就是我不再做原来的事情，也没有原来的 leader 来带我，同时，我也被分配到了一个新的项目，改做一份我之前从来没有做过的工作，暂时的工作压力让我没有更多的心力去迷茫，因为我又开始迷茫现在手头工作不熟悉的事情了。我自认为内心还算强大，希望能尽早排解吧。&lt;/p>
&lt;p>赶在 10 月底报名的考研，到现在勉强所示复习完两科了，其实真正用心准备时发现考试的难度确实不高，但是由于报名晚且工作，再加上自己英语属实薄弱，导致复习时间真的很不够用，还有 12 天就要考试了，不知道这次幸运女神是否还能眷顾我。&lt;/p>
&lt;p>生活是有点难。&lt;/p></description></item><item><title>201909 月总结</title><link>https://fishxy.github.io/post/diary/201909%E6%80%BB%E7%BB%93/</link><pubDate>Fri, 11 Oct 2019 00:00:00 +0000</pubDate><guid>https://fishxy.github.io/post/diary/201909%E6%80%BB%E7%BB%93/</guid><description>&lt;p>这个月的关键词，坚持、迷茫和准备。9 月份经历了太多，本来计划十一假期写的这篇文章由于拖延症也一直拖到了假期结束，结果反而是工作日的这几天接收到的信息太过爆炸。&lt;/p>
&lt;p>月初去参加了 PMP 考试，虽说自己报了在线班，虽说自己每天下班时间很晚，但是我接下来要说的并不是自己依然坚持了下来，而是我确实一次又一次的没有认真听讲，也没有完成模拟考试，所以不出意料的我这次差不多是一次自杀式裸考。考试时心里不光有对之前付完巨款的心疼和愧疚，也有对自己的不争气感到愤怒，当然更多是心存一丝侥幸，希望自己临时抱佛脚能够通过这次考试。&lt;/p>
&lt;p>考试已经过去一个月了，不知道自己工作后的第一次考试结果怎么样，即使最后结果是浪费了这一次的钱我也不意外，毕竟自己连之前上了 16 年学经常做的事情都没有坚持下来，真应该给自己一个大耳刮子。这次事件希望能给后面自己再去准备其他考试带来一些经验教训吧。&lt;/p>
&lt;p>如我之前的总结所说，我来到了新组里大概也有两个月了，所要负责的业务也了解的差不多清楚了，对于一些产品的新 feature 也设计了对应的方案，我觉得开始有了新方向，做事和了解的业务也觉得有了起色，但这也仅是自己的工作部分。&lt;/p>
&lt;p>然而公司由于一些原因、事故或者说是在市场竞争中败了下来，导致公司的盈利收到了巨大打击，进而带来的结果就是高层决定开源节流，裁员、业务调整是一条必经之路。团队内的不少同学都被“优化”掉了，而我虽侥幸留了下来，但是所负责的业务则被砍掉，后续的规划也全都无限期搁置。&lt;/p>
&lt;p>目前又处在个摸鱼划水的阶段，就好像我及其迷茫的 5 月份，总结来说很大原因是我现在还是在做执行、实现多余发现的工作，并没有寻找创造价值的机会，所以未来的阶段还是需要更多的在发现和创造机会上多用些功夫。&lt;/p>
&lt;p>对于这次公司调整过后，我开始重新考虑自己迁离这里的计划，这半年送走了很多朋友离开这座城市，我也不清楚自己还能留在这里多久，可能这次事件也让自己要重新审视后面的生活重心和方向了，万事还是需要有预见性的早做准备。&lt;/p>
&lt;p>9 月份经历的这些暂时告一段落了，不知道后面还会有什么风浪，希望自己能够坚持挺过一波又一波，就这样吧。&lt;/p>
&lt;p>对于一些其他的事情，随缘。&lt;/p></description></item><item><title>为什么我喜爱博客胜于其他社交媒体</title><link>https://fishxy.github.io/post/diary/%E4%B8%BA%E4%BB%80%E4%B9%88%E6%88%91%E5%96%9C%E7%88%B1%E5%8D%9A%E5%AE%A2%E8%83%9C%E4%BA%8E%E5%85%B6%E4%BB%96%E7%A4%BE%E4%BA%A4%E5%AA%92%E4%BD%93/</link><pubDate>Thu, 10 Oct 2019 00:00:00 +0000</pubDate><guid>https://fishxy.github.io/post/diary/%E4%B8%BA%E4%BB%80%E4%B9%88%E6%88%91%E5%96%9C%E7%88%B1%E5%8D%9A%E5%AE%A2%E8%83%9C%E4%BA%8E%E5%85%B6%E4%BB%96%E7%A4%BE%E4%BA%A4%E5%AA%92%E4%BD%93/</guid><description>&lt;p>这个问题，我早在之前的文章《关于 blog》中就提到过了，比起空间说说、朋友圈和微博这种东西，这种碎片化 140 字限制（虽然现在没有了这种限制）的短小片段，更喜欢没有篇幅限制的博客，因为博客可以写长文，也可以写 140 字的短片，当然只要我愿意，只有 1 个字的内容也是可以的。&lt;/p>
&lt;p>当然这只是其中一个原因，更深层的原因其实是相比于线上世界，我更喜欢的还是真实世界，而博客是我能在线上世界中体验到为数不多能够与真实世界更相关的表达方式。这也提到了一点——表达方式，得益于近 10 年的移动互联网发展，我们相互之间的沟通从过去的当面交流、电话交流和短信已经演变成了微信、微博等廉价沟通成本的交流方式，为什么说是廉价呢？在过去我们使用短信时会碍于 1 毛钱/条的价格，所以在发短信前或多或少会深思熟虑，希望能把最有价值最好理解东西传递给接收方，当然这种相比电话和当面交谈也不算是最佳方式。那现在呢？两个人交流完全不用再去考虑费用成本，这一方面是科技进步带来的好处，另一方面，在交流只是需要动动两个手指，信息是否经过大脑深思熟虑呢？这点就没有了保障，所以同样一句话你表达的意思和对方理解的意思可能就有冲突了，由此带来的矛盾和解释成本反而是一个增加的趋势。&lt;/p>
&lt;p>即使在现在，我也是更倾向于有事情能当面谈就当面谈，这样沟通的双方在语言、肢体语言、表情等方面都有交流，反倒是更有价值的事情。对于聊天 App 窗口里的几个文字，完全感觉不到语气和对方的状态，所以在脑补过程中浪费了时间还造成了误会。所以也是说，我认为沟通上，非文字部分的其他如语气、肢体语言、表情和态度等是存在更多价值的。&lt;/p>
&lt;p>同样的情况对于其他社交媒体也一样，简单的文字不能把自己的观点表达清楚，同样还回引起误会，就好比国内 wb 上对某些话题如女权、政治观点的表达，仅仅几十个文字表达的观点可能与读者的理解完全不同，然而在某些社交媒体上一旦你与对方的观点不一致，可能对方直接拉黑，你连解释的机会都没有。所以也是说碎片化内容让我们的阅读习惯和决策习惯发生了变化，当然这其中也和一个社交媒体上用户的整体调性有关。再说国内诸如今日头条、微信订阅号一类的产品，大部分写手是以盈利为目的的创作内容，而 blogger，大多是为了分享个人生活、传播个人观点而去创作内容，并不会考虑引流盈利的目的，这样创作的内容想表达的东西更佳纯粹，这也是为什么我喜欢 blog 的一点。&lt;/p>
&lt;p>无论是 blog 还是微博，或是国外的 Twitter、Facebook 等内容制造平台，问题回归到本质，还是你选择创作内容的方式和创作内容的目的，而只有 blog 这种平台才能让人在线上找到类似于写日记写短文的沉醉感觉。&lt;/p></description></item><item><title>浅谈商业 PM</title><link>https://fishxy.github.io/post/product/%E5%95%86%E4%B8%9Apm%E6%B5%85%E8%B0%88/</link><pubDate>Wed, 11 Sep 2019 00:00:00 +0000</pubDate><guid>https://fishxy.github.io/post/product/%E5%95%86%E4%B8%9Apm%E6%B5%85%E8%B0%88/</guid><description>&lt;h1 id="前文">前文&lt;/h1>
&lt;p>最近转岗到了偏商业的产品岗位，所以想简单记录下自己对商业产品岗位的理解，希望能够给一些初入这个方向的朋友带来一点帮助，也希望自己能够在未来的工作中对这个方向又更深的理解和认识，百尺竿头更进一步。&lt;/p>
&lt;h1 id="关于商业-pm-的基本认识">关于商业 PM 的基本认识&lt;/h1>
&lt;ol>
&lt;li>做好商业产品/ToB 和 ToC 产品，需要的能力大体是一致的，都需要具备产品经理的基本素养&lt;/li>
&lt;li>商业产品的需求通常来自于业务部门，也可能是来自高层上级&lt;/li>
&lt;li>商业产品经理，更需要关注在业务逻辑、架构设计和数据方面的能力&lt;/li>
&lt;/ol>
&lt;p>做好商业产品和用户产品，需要的能力大体一致，但是由于产品的专注点不同，需要的专场也不同，首先我们能明显关注到的主要不同点：&lt;/p>
&lt;ul>
&lt;li>需求来源不同
&lt;ul>
&lt;li>商业产品：主要来自于企业用户人员，故其需求通常来自于业务部门，也可能是来自高层&lt;/li>
&lt;li>用户产品：主要用户为大众，故其需求通常来自于市场调研，或者产品经理自己的产品感觉&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>产品目标不同
&lt;ul>
&lt;li>商业产品：为支撑企业的业务发展，通常目标可能是提升企业写作效率、流量变现、中台架构发展等&lt;/li>
&lt;li>用户产品：一般为了提升留存，提高 LT、LTV，增加流量等&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>对产品经理的要求不同
&lt;ul>
&lt;li>商业产品：更加侧重业务逻辑、架构设计和数据能力&lt;/li>
&lt;li>用户产品：更加侧重产品交互、用户体验和产品运营等能力&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;h1 id="商业产品工作需要注意的核心点">商业产品工作需要注意的核心点&lt;/h1>
&lt;p>商业产品由于需求主要来自于业务部门或企业高层，也就是通常一个商业产品团队要对接多个业务部门，在承担商业化进程的同时，也要照顾到多方业务的发展，所以在推进需求落地时需要注意一些关键点。&lt;/p>
&lt;ol>
&lt;li>与用户产品一样，需求一定要经过审核才可以进入开发流程&lt;/li>
&lt;li>未纳入开发的需求，以及被否决的原因，也要记录下来，在遇到其他业务方提出同样的需求时，无需重复审核&lt;/li>
&lt;li>重点：无论需求是否被纳入开发，都需要通知需求的提出人&lt;/li>
&lt;/ol>
&lt;h1 id="商业产品设计上的核心点">商业产品设计上的核心点&lt;/h1>
&lt;ol>
&lt;li>需要设计产品的信息架构，避免信息组织不合理，导致 UE 体验很差&lt;/li>
&lt;li>功能尽量在服务器端设计实现，出现问题可及时修复，相对于 SDK，维护成本低&lt;/li>
&lt;li>需要做数据设计，分析商业产品的使用情况和数据正确性&lt;/li>
&lt;/ol>
&lt;p>在设计上我们遵循以下一些原则，期望能在后续多业务部门协作上做到更好的支撑和扩展。&lt;/p>
&lt;ol>
&lt;li>
&lt;p>商业产品的需求主要来自于业务部门或企业高层，商业产品的设计主要由开发团队完成&lt;/p>
&lt;/li>
&lt;li>
&lt;p>网页设计，可由专职设计师或商业产品经理主要完成&lt;/p>
&lt;ul>
&lt;li>需要设计产品的信息架构，避免信息组织不合理，导致 UE 体验很差&lt;/li>
&lt;li>原型设计，以分析竞品为主 ，再辅以用户访谈、数据分析进行验证迭代&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>
&lt;p>服务器设计为主，有的商业产品也会涉及到 SDK 设计&lt;/p>
&lt;ul>
&lt;li>专业的人做专业的事，产品设计过程中尽早让服务器开发参与&lt;/li>
&lt;li>重服务器设计
&lt;ul>
&lt;li>功能尽量在服务器端实现，出现问题可及时修复，相对于 SDK，维护成本低&lt;/li>
&lt;li>很难抉择由服务器实现，还是由 SDK 实现时，要敢于给 leader，甚至高层写 todo&lt;/li>
&lt;li>架构设计、接口设计需要资深开发 review 后，才能实施&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>
&lt;p>数据分析&lt;/p>
&lt;ul>
&lt;li>追踪服务器设备成本，设备成本是否有异常增高&lt;/li>
&lt;li>收集使用者的数据，即商业产品的使用情况，可以了解商业产品的使用程度&lt;/li>
&lt;li>验证数据正确性，即商业产品数据的正确性，商业产品存在的基础，数据正确，才能实现商业产品的价值
&lt;ul>
&lt;li>可以与竞品进行数据对比，验证商业产品的数据是否正确&lt;/li>
&lt;li>提醒开发监测tick、sentry是否有明显异常&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ol>
&lt;h1 id="一些题外话">一些题外话&lt;/h1>
&lt;p>分享Business的各环节关系(自顶向下)，加粗部分是内部环节：&lt;/p>
&lt;p>Customer- &amp;gt; Client- &amp;gt; &lt;strong>BD/Sales- &amp;gt; Marketing- &amp;gt; Product Management- &amp;gt; Project Management- &amp;gt; Engineer Team.&lt;/strong>&lt;/p>
&lt;p>不同人对产品的一点评价：&lt;/p>
&lt;p>技术 leader 说：&lt;/p>
&lt;ol>
&lt;li>产品全景图要门儿清，同时也要能够构建这一阶段需要迭代哪些，排列好优先级&lt;/li>
&lt;li>懂技术，最起码大概知道简单的实现，能够在找技术进行评审前就能根据当前任务进度、资源安排确定好我们这个需求应不应该、能不能做&lt;/li>
&lt;li>数据分析能力，不是简简单单的罗列数据，前后增长百分比什么的，主要是能够建立模型、进行分析，并且在提出某个需求时或者做某一类决策时能够引出数据说明为什么，能够有说服力&lt;/li>
&lt;li>出现问题，出现 bug 的时候能够分析具体什么原因造成的，用户的前后操作路径等等&lt;/li>
&lt;li>项目管理问题，沟通能力极其重要&lt;/li>
&lt;/ol>
&lt;p>一线 dev 说：&lt;/p>
&lt;ol>
&lt;li>不要总变需求&lt;/li>
&lt;li>懂技术，沟通顺畅&lt;/li>
&lt;li>任务的优先级安排，知道先做哪个后做那个&lt;/li>
&lt;li>同步目标，dev 希望能够知道&lt;/li>
&lt;/ol>
&lt;p>产品总监说：&lt;/p>
&lt;ol>
&lt;li>业务能力，学习&lt;/li>
&lt;li>b 端产品的玩法一定要了解&lt;/li>
&lt;/ol></description></item><item><title>201908 月总结</title><link>https://fishxy.github.io/post/diary/201908%E6%80%BB%E7%BB%93/</link><pubDate>Tue, 03 Sep 2019 00:00:00 +0000</pubDate><guid>https://fishxy.github.io/post/diary/201908%E6%80%BB%E7%BB%93/</guid><description>&lt;p>8 月份算是个外界和自己驱动共同需要成长的一个月。&lt;/p>
&lt;p>&lt;strong>工作&lt;/strong>&lt;/p>
&lt;p>在自己的争取和 HR 的帮助下，来到新的小组，接触了不擅长的业务，这些是自己寻求的挑战，也是自己想跳出所谓“舒适圈”获得成长的结果。&lt;/p>
&lt;p>由于是内部 transfer，团队融入的很快，而且相对于新员工咋在公司整体做事风格上更熟悉，此外由于自己之前项目的经历，在业务熟悉上提供了自己很大的帮助。但是新业务是基于实际业务场景进行落地的，相比之前的项目更具象，所以由于自己对用户业务的不了解，这块短板很快就暴露出来了。&lt;/p>
&lt;p>所幸团队 leader 和同事都很热心给我解答，当然我也对自己的学习能力比较自信。&lt;/p>
&lt;p>希望自己能够尽快熟悉业务，做出一些成绩。&lt;/p>
&lt;p>&lt;strong>生活&lt;/strong>&lt;/p>
&lt;p>受伤的右脚踝逐渐好起来，逐渐能够负担了一些负重运动，不过还是担心不能完全恢复好，影响自己的运动能力。&lt;/p>
&lt;p>健身，8 月以来逐渐恢复了每周至少 3 次的规律健身习惯，卧推力量上到了一个平台期，硬拉和深蹲碍于自己的脚伤始终不敢再进行尝试，而且由于自己在饮食和作息上没有进行太严格的管理，导致体脂还是保持在 25% 左右没有改善。&lt;/p>
&lt;p>足球也加入了新的球队，在新队中逐渐被队友接受和认可，还能保持着每两周至少一场球的频率，实在是对这项运动太热爱了，右脚还没好利索就去踢比赛，说实话自己还是担惊受怕的，可能是真的热爱这项运动吧。&lt;/p>
&lt;p>这个月跟同事还去参加了斯巴达越野障碍赛，脚踝缠着 8 字绷带完赛，顶着烈日，12km、3000m 爬升和 25 个障碍确实对自己的精神和体能有巨大的考验，坚持走下了全程确实觉得没有什么困难是迈步过去的。&lt;/p>
&lt;p>生活的其他方面好像都被工作给占据了，周末也没有时间再跟朋友聚会，也很少出去逛了。&lt;/p>
&lt;p>另外，这个月又送走了几个离开北京的朋友和同事，也不知道自己什么时候会决定选择离开还是留下。&lt;/p>
&lt;p>&lt;strong>其他&lt;/strong>&lt;/p>
&lt;p>这周末还要准备 PMP 考试，说实话自己的自制力太差，中途好多章节都没有认真听，又要临阵抱佛脚了，6 月份说的 MEM 也没有坚持准备下来，这周末先把 PMP 搞定再做计划吧。&lt;/p></description></item><item><title>201907 月总结</title><link>https://fishxy.github.io/post/diary/201907%E6%80%BB%E7%BB%93/</link><pubDate>Thu, 01 Aug 2019 00:00:00 +0000</pubDate><guid>https://fishxy.github.io/post/diary/201907%E6%80%BB%E7%BB%93/</guid><description>&lt;p>又是熟悉的开头，毕业后觉得时间过得飞快，这一个月过去的也好快，上个月 6 月确实有些不顺，工作不如意，运动受伤都搞得自己没什么精气神，所以还是在这一个月的时间尽力去改变，总体来说无论生活还是工作都相对逐渐趋于规律和正轨了吧，虽然说是遇到不顺的慢慢调整，但是自己还是比较心急的，能尽快解决的事情就不想拖太久。&lt;/p>
&lt;p>&lt;strong>生活&lt;/strong>&lt;/p>
&lt;p>乱七八糟事情一大堆，又错过了一个姐姐的婚礼，上次错过另一个姐姐的婚礼是因为大学刚入学军训。这回家里面临结婚的真就是轮到我了，希望家里不会急着催吧哈哈。&lt;/p>
&lt;p>6 月底踢球把脚崴伤了，这个月基本都处于一瘸一拐的状态，现在勉强能走路了，跑跳还是承受不了疼痛。&lt;/p>
&lt;p>健身最后一周也慢慢恢复起来了，不过由于脚伤还没痊愈，现在只敢练个上本身。😂&lt;/p>
&lt;p>&lt;del>&lt;strong>感情&lt;/strong>&lt;/del>&lt;/p>
&lt;p>null&lt;/p>
&lt;p>&lt;strong>工作&lt;/strong>&lt;/p>
&lt;p>因为组织架构调整，组内 leader 离职，部门业务与自己规划的发展方向不太相符、业务线又有点偏组内处于跟一个比我高一级的同事摸黑的状态，大家都不知道怎么做，不断地在高成本试错，每天都是一个新想法，还自以为不错的那种，当然最主要的是自己在这里学不到一点东西，哎。讲道理其实都是自己的借口，工作有不顺心的时候太正常了，主要是能不能想清楚自己到底想要什么，想获得什么，与公司双赢当然是理想的情况，但是如果团队、公司给不了你想要的成长，我的看法是就争取其他机会。我一直向往的能够跟一群有战斗力，最起码能跟一群让我嫉妒，让我能跟他们学到东西的人共事。&lt;/p>
&lt;p>所以我跟那个算是我上级的同事表述了我的想法，我想多学习一些东西，而不是现在只做一个每天摸黑，学的很肤浅的东西，互相交换想法的时候她并不能解答我的困惑，只是在翻来覆去的讲述现状，她也不清楚后面的业务规划和发展，简单的聊天我意识到我可能在她这里获取不到更有价值、帮助自己成长的东西了，所以这时候我认真的考虑了是否应该寻找其他机会。后面也就是外面试探性的找了下，拿了一家的 offer。6 月我抱着现在这个团队还能看到一丝成长机会的幻想，拒绝了外面的 offer，坚持了半个月后，跟 hr 提出了内部转岗的想法。由于是自己主动提出的，所以要考虑接受团队是否有 hc，以及是否能够接受我，会比较被动，所以我能做的就是——等待。&lt;/p>
&lt;p>终于在这个月，经过了一系列的操作，我加入了现在的团队（也是我之前一直想加入的团队），目前来看团队的业务我很感兴趣，也觉得自己能够发挥一些东西，团队的成员也很好，且由于是内部转岗，熟悉成本要低很多了，现在我已经来了不到一周，就算是跟大家已经都熟悉了。这里确实很感谢新团队的成员，跟感谢一直帮我寻找新机会的 hr。&lt;/p>
&lt;p>我想说的并不是鼓励大家遇到挫折就退缩，就去寄希望于其他的环境能给自己更好的帮助，我想说的是，不论是学习还是工作，最重要的事情是要清楚自己想要做什么，想要获得什么，想要学到什么，如果目前的现状不能提供给你帮助，或是未来不能给你带来价值，有什么选择可以改变现状。很多事情其实不是靠外界因素影响的，更重要的是自己要有内驱力。鸡汤灌完了，我觉得我也要在新环境里努力工作了，不到一年换了 3 条产品线，这次不做出一点成绩，真的有点说不过去了。&lt;/p></description></item><item><title>垃圾分类</title><link>https://fishxy.github.io/post/diary/%E5%9E%83%E5%9C%BE%E5%88%86%E7%B1%BB/</link><pubDate>Sun, 28 Jul 2019 00:00:00 +0000</pubDate><guid>https://fishxy.github.io/post/diary/%E5%9E%83%E5%9C%BE%E5%88%86%E7%B1%BB/</guid><description>&lt;p>自从上海宣布执行垃圾分类后有关于垃圾分类的讨论就没停下过，而且北京也大有将要实行的趋势，关于垃圾分到什么类别，也马上就有对应的图片识别 App 上架了。跟同事一起开玩笑，说这是个时机，是时候做一波垃圾分类的创业了，想来想去，我们准备深耕垃圾运输这个环节。&lt;/p>
&lt;p>为什么是运输环节呢？&lt;/p>
&lt;p>这就要说下垃圾分类前后的变化了，在施行垃圾分类之前，垃圾运输通常都是定期来一辆垃圾车，不分种类统统将所有的垃圾都倒入车内，然后运输到垃圾集中点、垃圾场去，这是的垃圾混杂着各种类型的，垃圾处理厂不会直接进行处理，而是任由附近的居民、收废品的人会去里面“淘宝”，然后再将淘到的废品出价卖给垃圾处理厂，这里我们能发现，在原来的模式下其实垃圾也是进行分类的，但是将分拣工作是放到了回收工作后，利用“众包”的模式进行有偿的垃圾分拣。&lt;/p>
&lt;p>那在施行垃圾分类后是怎么做的呢？垃圾分类这个环节就不再说明了，我们能够台湾在执行垃圾分类后，回收是有专门的垃圾车进行回收，每天在固定的时间沿固定路线收垃圾，清洁人员也要确认无误后才可以丢上垃圾车。虽然是在回收前节省了后续“众包”环节的分拣操作，但实际上由于分类回收，增加了运输车辆、人力成本，从而大大增加了运输成本，一辆车过来只能收走其中一类垃圾，其他类别只能等下一趟来收。而且如果民众错过了某一时间的特定种类垃圾回收，就只能抱着垃圾等下一趟了。&lt;/p>
&lt;p>当然实际上我和同事的想法更离谱，我们还准备去找马斯克拉融资，先借几个火箭，打算把垃圾运输到外太空其他星球上去，从而确保地球是干净的😂，这听起来就跟发达国家把垃圾丢到其他国家的性质一样。&lt;/p>
&lt;p>简而言之，垃圾肯定不能乱扔的，但是究竟怎么能低成本的回收分拣、高质量高效率的处理才是问题，而不是盲目的学习人家的东西，病急乱投医(txtx，溜了溜了，我去拉融资借火箭去了。&lt;/p></description></item><item><title>推荐系统学习</title><link>https://fishxy.github.io/post/reading/%E6%8E%A8%E8%8D%90%E7%B3%BB%E7%BB%9F%E5%AD%A6%E4%B9%A0%E4%B8%80/</link><pubDate>Thu, 18 Jul 2019 00:00:00 +0000</pubDate><guid>https://fishxy.github.io/post/reading/%E6%8E%A8%E8%8D%90%E7%B3%BB%E7%BB%9F%E5%AD%A6%E4%B9%A0%E4%B8%80/</guid><description>&lt;div class="douban_show">
&lt;div id="db9787115281586" date-dbid="9787115281586" class="douban_item post-preview">&lt;/div>
&lt;/div>
&lt;p>文章主要是想对推荐系统涉及的基础概念和常见的使用场景进行简单介绍，并罗列一些推荐系统的基本算法，由于作者本身并不从事程序开发工作，所以对于深层次的技术探讨上涉及较少，希望通过自己阅读书籍和收集整理其他文章的内容对推荐系统进行一个简单的梳理，也希望能够通过此文帮助大家更容易的理解推荐系统。&lt;/p>
&lt;h1 id="推荐系统是什么">推荐系统是什么&lt;/h1>
&lt;p>一句话来说，推荐系统就是根据&lt;strong>用户的历史行为、用户属性、社交关系、所处的环境以及上下文&lt;/strong>等等信息去判断满足用户&lt;strong>需要或是感兴趣&lt;/strong>的内容的一类服务/应用。&lt;/p>
&lt;h1 id="为什么需要推荐系统">为什么需要推荐系统&lt;/h1>
&lt;p>这就不得不从早期的分类目录、搜索引擎说起了，在社会进步的过程中我们产生了大量的知识、信息（数据），人类也从信息匮乏时代走向了&lt;strong>信息过载&lt;/strong>时代，对于用户也就是信息消费者来说，从大量信息中找到自己当下需要的相关信息是很困难的，于是互联网时代的分类目录（如 hao123）和搜索引擎应运而生，他们允许用户根据自己当下&lt;strong>明确&lt;/strong>的需求或是&lt;strong>准确&lt;/strong>的关键词&lt;strong>主动&lt;/strong>去检索相关的信息。&lt;/p>
&lt;p>当然后面的发展我们也知道了，信息过载的情况并不会好转，我们还是有大量的信息被生产出来，生产者苦于自己的信息淹没在海洋里，信息消费者苦于找不到自己需要的信息。而推荐系统也正式应运而生，它与搜索引擎不同的是，它不需要用户当前明确的需求，而是根据用户的历史行为等数据进行分析，从而&lt;strong>主动给用户推荐&lt;/strong>满足他们需求或是感兴趣的内容。&lt;/p>
&lt;p>通过上面的文字我们能清晰地了解到，不管是分类目录、搜索引擎还是推荐系统，都是为了解决&lt;strong>信息过载&lt;/strong>这个问题，都是为了信息能够分发到消费者。不同的是搜索引擎不需要用户提供明确的需求，用户处于被动接收信息的状态，而搜索引擎则需要用户主动提出自己明确的需求（关键词）。&lt;/p>
&lt;h1 id="推荐系统的用处">推荐系统的用处&lt;/h1>
&lt;p>上文提到了，信息过载后信息分发难催生了推荐系统，而像电子商务、电影视频媒体、音乐电台的个性化推荐、个性化阅读、广告以及 LBS 等等服务都是推荐系统常见的使用场景。想想你在逛淘宝时给你推荐感兴趣的商品、在流媒体网站推荐视频、订外卖、听音乐，推荐系统都在将你可能感兴趣的信息推送给你。于是由于每个人的喜好和行为不同，收到的信息也就不同，我们每一次操作行为都会作为一份数据留下记录，推荐系统从而根据我们的数据为我们提供不同的个性化信息，以此实现个性化推荐，进而提高产品的各项业务指标。&lt;/p>
&lt;h1 id="推荐系统的组成">推荐系统的组成&lt;/h1>
&lt;p>&lt;img src="https://fishw.xyz/blogdata/img/20190718160759.png" alt="">&lt;/p>
&lt;p>一个完整的推荐系统一般都是由 3 个参与方组成：&lt;/p>
&lt;ul>
&lt;li>用户&lt;/li>
&lt;li>内容提供方&lt;/li>
&lt;li>提供推荐系统的网站（产品）&lt;/li>
&lt;/ul>
&lt;p>一个好的推荐系统应当首先能够满足用户的需求，为用户推荐他们需要、感兴趣的信息；其次能够将内容提供方的内容更好的推荐给感兴趣的用户，寻求最大转化，而不只是推荐最热门的内容；最后好的推荐系统设计，应当能够让推荐系统本身收集到高质量的用户反馈，不断完善推荐的质量，增加用户和网站的交互，提高网站的收入。因此在评测一个推荐算法时，需要同时考虑三方的利益，一个好的推荐系统是能够令三方共赢的系统。&lt;/p>
&lt;p>尽管各家的推荐系统会有不同，但是总的来说推荐系统的结构都是类似的，都是由线上和线下两部分组成。线下部分包括日志系统和推荐算法，而线上部分就是用户可见的不同页面展示，线下部分通过学习用户数据建立模型，在新条件下计算相应的推荐内容，再呈现在线上页面中。&lt;/p>
&lt;h1 id="推荐系统的实验方法">推荐系统的实验方法&lt;/h1>
&lt;p>推荐系统主要有 3 种评测推荐效果的实验方法：离线实验、用户调查和在线实验。我们通过利用这 3 种常见的实验方法根据不同指标对推荐系统进行评测，确认是否达到我们的要求。&lt;/p>
&lt;h2 id="离线实验">离线实验&lt;/h2>
&lt;p>离线实验的方法一般包含以下几个步骤：&lt;/p>
&lt;ul>
&lt;li>通过日志系统获得用户行为数据，并按照一定格式生成一个标准的数据集；&lt;/li>
&lt;li>将数据集按照一定的规则分成训练集和测试集；&lt;/li>
&lt;li>在训练集上训练用户兴趣模型，在测试集上进行预测；&lt;/li>
&lt;li>通过事先定义的离线指标评测算法在测试集上的预测结果。&lt;/li>
&lt;/ul>
&lt;p>可以看出，离线实验都是在数据集上完成的，不需要一个实际的系统和真实用户参与，只需要一些从实际系统中提取的数据集即可，因此离线实验速度快，可以方便快速的测试大量算法，它的主要缺点是无法获得很多商业上关注的指标，如点击率、转化率等。&lt;/p>
&lt;h2 id="用户调查">用户调查&lt;/h2>
&lt;p>用户调查不论是在做产品的需求调研，或是评估一件事情结果如何上都是最有效的方法。同样的，在推荐系统上，由于高预测准确率不等于高用户满意度，所以我们评测一个要投入使用的推荐算法，最好的方式就是调查一些真实用户，让他们在要测试的推荐系统上完成一些任务、操作，观察并记录他们的行为，并让他们回答一些问题，最后通过分析来了解系统是否满足我们的需求。&lt;/p>
&lt;p>但是不论是其他类型的产品还是推荐系统，在用户调查上都是一项成本较高的活动，从调查测试的设计再到测试用户的选取都需要精心安排，十分麻烦。&lt;/p>
&lt;p>下面引用《推荐系统实战》中的原文：&lt;/p>
&lt;blockquote>
&lt;p>用户调查的优缺点也很明显。它的优点是可以获得很多体现用户主观感受的指标，相对在线实验风险很低，出现错误后很容易弥补。缺点是招募测试用户代价较大，很难组织大规模的测试用户，因此会使测试结果的统计意义不足。此外，在很多时候设计双盲实验非常困难，而且用户在测试环境下的行为和真实环境下的行为可能有所不同，因而在测试环境下收集的测试指标可能在真实环境下无法重现。&lt;/p>
&lt;/blockquote>
&lt;h2 id="在线实验">在线实验&lt;/h2>
&lt;p>在线实验通常是在离线实验和必要的用户调查之后，通过上线新算法与旧算法进行 AB 测试，再通过统计不同评测指标来比较效果。&lt;/p>
&lt;p>由于 AB 测试采取控制变量的方式，所以它可以公平的获得不同改动的真实数据，包括商业上关注的指标，但它的缺点是测试周期长，必须进行长期的实验才能得到可靠地结果。此外对于一个大型复杂系统，从前台页面展示到后端算法中间流量往往经过了很多层，由不同团队进行分工，而且都有可能再进行 AB 测试，那么如何合理分配流量保证各个团队测试公平就是需要考虑设计的了，关于 AB 测试这里就不在过多赘述了，它是一种常见的在线测评方法，在产品设计的改动中也经常采用这种方法，原理同我们的控制变量法是一样的。&lt;/p>
&lt;p>综上所述，我们一般只有在测试离线实验和用户调查中表现较好的算法才应该进行在线实验，从而节省投入成本。&lt;/p>
&lt;p>因此，一个新的推荐算法最终上线，需要完成上面所说的3个实验。&lt;/p>
&lt;ul>
&lt;li>
&lt;p>首先，需要通过离线实验证明它在很多离线指标上优于现有的算法。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>然后，需要通过用户调查确定它的用户满意度不低于现有的算法。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>最后，通过在线的AB测试确定它在我们关心的指标上优于现有的算法。&lt;/p>
&lt;/li>
&lt;/ul>
&lt;h1 id="推荐系统的评测指标">推荐系统的评测指标&lt;/h1>
&lt;p>很多人将推荐系统定义为能够准确预测的系统，比如某个推荐系统预测你一定会买商品 A，后来你也确实购买了，那么这就被看做一次准确地预测。这个称之为预测准确度，他是评测推荐系统的重要指标。但是很多时候，准确预测并不代表好的预测，如果说用户无论是否推荐，他都准备购买商品 A，那么这次推荐并未带来更大的收益，仅仅是方便用户更快的找到自己需要的商品 A，对于用户来说这次推荐不够惊喜新颖。&lt;/p>
&lt;p>《推荐系统实战》中还提到了另一个极端的例子，比如某个系统预测太阳东升西落，虽然预测准确率是 100%，但却是一种没有意义的预测。&lt;/p>
&lt;p>所以我们说，推荐系统不仅仅需要能够准确预测用户的行为，也更应当满足业务需要，拓宽用户视野，发觉埋没在长尾中的信息，这也是后面我们要讲的，一个好的推荐系统应当能为用户提供他们感兴趣的包括很多难以发现的信息，也应当帮助信息生产者将他们的信息更容易的推荐给他们感兴趣的用户。&lt;/p>
&lt;p>因此评测一个推荐系统对三方利益的影响，需要根据实际需要从不同角度的指标进行评估。&lt;/p>
&lt;h2 id="用户满意度">用户满意度&lt;/h2>
&lt;p>用户作为推荐系统的重要参与者，其满意度是评测推荐系统的最重要指标。但是，用户满意度没有办法离线计算，只能通过用户调查或者在线实验获得。&lt;/p>
&lt;p>在线系统中，用户满意度主要通过一些对用户行为的统计得到。比如在电子商务网站中，用户如果购买了推荐的商品，就表示他们在一定程度上满意。因此，我们可以利用购买率度量用户的满意度。&lt;/p>
&lt;p>此外，有些网站会通过设计一些用户反馈界面收集用户满意度。比如在豆瓣网络电台中，都有对推荐结果满意或者不满意的反馈按钮（通过红心和垃圾箱的反馈来度量用户满意度），通过统计两种按钮的单击情况就可以度量系统的用户满意度。更一般的情况下，我们可以用点击率、用户停留时间和转化率等指标度量用户的满意度。&lt;/p>
&lt;h2 id="预测准确度">预测准确度&lt;/h2>
&lt;p>预测准确度衡量一个推荐系统或者推荐算法预测用户行为的能力，是最重要的推荐系统离线评测指标。但它不是一个绝对准确唯一追求的目标，上文提到过推荐商品购买的情况，和预测太阳东升西落的情况就是一个反例。&lt;/p>
&lt;p>所以推荐系统中预测准确度固然很重要，但也要能够拓宽用户的视野，发掘更多长尾内容，帮助用户发现那些他们感兴趣但却不那么容易发现的内容，也要帮助内容提供者更可能的将他们的内容提供给感兴趣的用户。&lt;/p>
&lt;p>预测准确度可以利用离线的数据集，分为训练集和测试集，通过利用训练集的训练处的模型预测用户在测试集的行为，并与测试集上的真实数据对比作为预测的准确度。&lt;/p>
&lt;p>预测准确度的指标包括以下几类：&lt;/p>
&lt;h3 id="评分预测">评分预测&lt;/h3>
&lt;p>评分预测就是利用用户对物品的评分历史，学习他的兴趣模型，进而预测用户在将来看到一个他们有评分过的物品时，会给这个物品评多少分。&lt;/p>
&lt;p>评分预测的预测准确度一般通过均方根误差（RMSE）和平均绝对误差（MAE）计算。对于测试集中的一个用户 \(u\) 和物品 \(i\)，令 \(r_{ui}\) 是用户 \(u\) 对物品 \(i\) 的实际评分，而 \(\overset { \wedge }{ r } _{ ui }\) 是推荐算法给出的预测评分，那么 RMSE 和 MAE 的定义为：&lt;/p>
&lt;p>$$
RMSE=\frac { \sqrt { \sum { {&lt;em>{ u,i\in T }{ (r&lt;/em>{ ui }-\overset \wedge r_{ ui } } } } ) } }{ \left| T \right|}
$$&lt;/p>
&lt;p>$$
MAE\quad =\quad \frac { \sum { { &lt;em>{ u,i\in T }{ \left| r&lt;/em>{ ui }-{ \overset { \wedge }{ r } }_{ ui } \right| } } } }{ \left| T \right| }
$$&lt;/p>
&lt;p>RMSE 由于使用了平方项惩罚，从而加大了对预测不准的用户物品评分的惩罚，因而对系统的评测更苛刻。&lt;/p>
&lt;h3 id="top-n-推荐">Top N 推荐&lt;/h3>
&lt;p>Top N 推荐就是给用户一个个性化的推荐列表，他的预测准确率一般通过准确率（precision）/召回率（recall）度量。这两个是源于机器学习中的概念。&lt;/p>
&lt;p>令\(R(u)\)是根据用户在训练集上的行为给用户作出的推荐列表，而\(T(u)\)是用户在测试集上的行为列表。那么，推荐结果的召回率定义为：
$$
Recall\quad =\quad \frac { \sum _{ u\in U }^{ }{ \left| R(u)\cap T(u) \right| } }{ \sum _{ u\in U }^{ }{ \left| T(u) \right| } }
$$
准确率定义为：
$$
Precision\quad =\quad \frac { \sum _{ u\in U }^{ }{ \left| R(u)\cap T(u) \right| } }{ \sum _{ u\in U }^{ }{ \left| R(u) \right| } }
$$
实际使用场景中，Top N 相比评分预测会更有意义，真实情况就是一部电影用户看后可能会给很高的分数，但是用户看这个电影的可能性确实非常小，因此预测用户是否会看一部电影要比预测看了电影后给它多少评分更加重要，而且现在的产品，出去点评类的，已经很少有用评分去手机用户反馈了。&lt;/p>
&lt;h2 id="覆盖率">覆盖率&lt;/h2>
&lt;p>覆盖率描述一个推荐系统对物品长尾的发掘能力，也就是能否将内容提供者的内容都能被推荐到其感兴趣的用户面前的能力。覆盖率有不同的定义方法，最简单的定义为推荐系统能够推荐出来的物品占总物品集合的比例，也就是对所有用户的推荐列表取并集，看看能否覆盖所有的内容，覆盖比例是多少。&lt;/p>
&lt;p>假设系统的用户集合为\(U\)，推荐系统给每个用户推荐一个长度为N的物品列表\(R(u)\)。那么推荐系统的覆盖率可以通过下面的公式计算：
$$
Coverage\quad =\quad \frac { \left| { U }_{ u\in U }R(u) \right| }{ \left| I \right| }
$$
当然这个定义是很粗略的，我们能发现这个定义说明了如果覆盖率是 100% 的系统，他可以将每个物品都推荐给至少一个用户，此外我们也能发现热门排行榜的覆盖率是最低的，因为他只会推荐占总物品中比例很小的热门物品。&lt;/p>
&lt;p>如果对于长尾内容只推荐很少的几次，是否就能简单的说推荐覆盖率很高呢？因此它可以粗略的评估一个推荐系统的覆盖率，但还不能用来准确的评估对长尾内容的发掘能力。如果需要评估长尾内容的发掘能力，我们应当统计推荐列表中不同物品出现次数的分布。如果所有的物品都出现在推荐列表，且出现的次数都差不多，那么就可以说明推荐系统发掘长尾的能力很好，进而确定系统覆盖率高。&lt;/p>
&lt;p>经济学和信息学中有两个著名的指标，第一个就是信息熵，熵值混乱程度，熵最大的分布，就是各种物品出现的概率均匀，熵越小，就代表分布越集中，混乱程度越小。所以我们可以计算物品分布的熵值，并希望熵越大越好，熵越大指分布越平均，推荐系统也就更接近全覆盖，而不是只集中在少数热门的物品。熵的计算公式：
$$
H\quad =\quad -\sum _{ i=1 }^{ n }{ p(i)\log { p(i) } }
$$
第二个指标是基尼系数：&lt;/p>
&lt;p>$$
G=\frac 1{ n-1 } \sum _{ j=1 }^{ n }{ (2j-n-1)p(i_j) }
$$&lt;/p>
&lt;p>其中\(p(x)\)是流行程度从小到大排序，\(i_j\)是物品列表\(I\)按照从大到小排序的第\(i\)个物品。下面引用《推荐系统实战》书中一图对其原理进行解释&lt;/p>
&lt;p>&lt;img src="https://fishw.xyz/blogdata/img/20190718140637.png" alt="">&lt;/p>
&lt;p>社会学中有种现象叫做马太效应，强者愈强，弱者愈弱。这样，越热门的物品会越热门，越冷门的物品越会无人问津，推荐系统就希望尽量消除这种马太效应，让冷门物品也能找到对自己感兴趣的用户，让用户也不必只看排行榜，自己的兴趣和需求也能得到更好的满足。所以我们先根据初始用户行为（根据用户行为定义的热门/冷门）计算物品的基尼系数，然后再根据推荐系统行为（根据推荐系统的推荐次数定义的热门/冷门）计算物品的基尼系数，如果后者的基尼系数反而大了，那说明推荐算法加剧了马太效应。&lt;/p>
&lt;p>稍微解释一下，如果推荐系统只疯狂推荐某一种物品，其他物品都不推荐，这样的马太效应就反而更甚于初始的情况了，又会进一步加剧整个生态的马太效应。只有推荐系统对物品均匀的推荐，初始的热门/冷门物品的推荐次数都差不多，才能让初始的冷门产品热起来。&lt;/p>
&lt;h2 id="多样性">多样性&lt;/h2>
&lt;p>为了满足用户广泛的兴趣，推荐列表需要能够覆盖用户不同的兴趣领域，即推荐结果需要具有多样性。尽管用户的兴趣在较长的时间跨度中是一样的，但具体到用户访问推荐系统的某一刻，其兴趣往往是单一的，那么如果推荐列表只能覆盖用户的一个兴趣点，而这个兴趣点不是用户这个时刻的兴趣点，推荐列表就不会让用户满意。反之，如果推荐列表比较多样，覆盖了用户绝大多数的兴趣点，那么就会增加用户找到感兴趣物品的概率。因此给用户的推荐列表也需要满足用户广泛的兴趣，即具有多样性。&lt;/p>
&lt;p>多样性描述了推荐列表中物品两两之间的不相似性。因此，多样性和相似性是对应的。假设\(s(i,j)\in [0,1]\)定义了物品\(i\) 和\(j\)之间的相似度，那么用户\(u\)的推荐列表\(R(u)\)的多样性定义如下：
$$
Diversity\quad =\quad 1-\frac { \sum { { _{ i,j\in R(u),i\neq j }{ s(i,j) } } } }{ \frac { 1 }{ 2 } \left| R(u) \right| (\left| R(u) \right| -1) }
$$&lt;/p>
&lt;p>而推荐系统的整体多样性可以定义为所有用户推荐列表多样性的平均值：
$$
Diversity\quad =\quad \frac { 1 }{ \left| U \right| } \sum _{ u\in U }^{ }{ Diversity(R(u)) }
$$&lt;/p>
&lt;p>从上面的定义可以看到，不同的物品相似度度量函数\(s(i,j)\)可以定义不同的多样性。如果用内容相似度描述物品间的相似度，我们就可以得到内容多样性函数，如果用协同过滤的相似度函数描述物品间的相似度，就可以得到协同过滤的多样性函数。&lt;/p>
&lt;p>其实提高覆盖率也能在侧面对提高多样性起到积极作用。&lt;/p>
&lt;h2 id="新颖性">新颖性&lt;/h2>
&lt;p>新颖的推荐是指给用户推荐那些他们之前没听说过的物品，最简单的方式当然是，把那些用户之前在系统中有过行为的物品从推荐列表中过滤掉。比如在一个视频网站中，新颖的推荐不应该给用户推荐那些他们已经看过、打过分或者浏览过的视频。但是，有些视频可能是用户在别的网站看过，或者是在电视上看过，因此仅仅过滤掉本网站中用户有过行为的物品还不能完全实现新颖性。&lt;/p>
&lt;p>还有种方式是让推荐结果中物品的平均热门程度较低，这样就更可能有较高的新颖性。牺牲精度提高新颖性是很容易的，困难的是不牺牲精度，同时提高新颖性。&lt;/p>
&lt;p>但是，用推荐结果的平均流行度度量新颖性比较粗略，因为不同用户不知道的东西是不同的。因此，要准确地统计新颖性需要做用户调查。&lt;/p>
&lt;h2 id="惊喜度">惊喜度&lt;/h2>
&lt;p>惊喜度令用户惊喜的推荐结果是和用户历史上喜欢的物品不相似，但用户却觉得满意的推荐。那么，定义惊喜度需要首先定义推荐结果和用户历史上喜欢的物品的相似度，其次需要定义用户对推荐结果的满意度。&lt;/p>
&lt;p>用户满意度只能通过问卷调查或者在线实验获得，而推荐结果和用户历史上喜欢的物品相似度一般可以用内容相似度定义。也就是说，如果获得了一个用户观看电影的历史，得到这些电影的演员和导演集合A，然后给用户推荐一个不属于集合A的导演和演员创作的电影，而用户表示非常满意，这样就实现了一个惊喜度很高的推荐。因此提高推荐惊喜度需要提高推荐结果的用户满意度，同时降低推荐结果和用户历史兴趣的相似度。&lt;/p>
&lt;p>新颖度和惊喜度的区别在，新颖度说的是没听过的物品，没听过的物品是有可能与用户的历史兴趣相似的，就没有了惊喜度。惊喜度可以说是新颖度的升级，因为没听过的物品中包含与历史兴趣相似的和不相似的物品。也许惊喜度的核心在于让用户无法理解推荐原因。&lt;/p>
&lt;h2 id="信任度">信任度&lt;/h2>
&lt;p>信任度是指用户对于推荐系统的信任程度，提高推荐系统的信任度主要有两种方法：&lt;/p>
&lt;ul>
&lt;li>需要增加推荐系统的透明度，而增加推荐系统透明度的主要办法是提供推荐解释。只有让用户了解推荐系统的运行机制，让用户认同推荐系统的运行机制，才会提高用户对推荐系统的信任度。&lt;/li>
&lt;li>考虑用户的社交网络信息，利用用户的好友信息给用户做推荐，并且用好友进行推荐解释。这是因为用户对他们的好友一般都比较信任，因此如果推荐的商品是好友购买过的，那么他们对推荐结果就会相对比较信任。&lt;/li>
&lt;/ul>
&lt;p>但是其实很多情况下，对于一些很容易直观感受到推荐结果好坏的物品，比如音乐、短视频，信任度就不那么重要了。&lt;/p>
&lt;h2 id="实时性">实时性&lt;/h2>
&lt;p>在很多网站中，因为物品（新闻、微博等）具有很强的时效性，所以需要在物品还具有时效性时就将它们推荐给用户。比如，给用户推荐昨天的新闻显然不如给用户推荐今天的新闻。因此，在这些网站中，推荐系统的实时性就显得至关重要。&lt;/p>
&lt;p>推荐系统的实时性包括两个方面：&lt;/p>
&lt;ul>
&lt;li>推荐系统需要实时地更新推荐列表来满足用户新的行为变化。比如，当一个用户购买了iPhone，如果推荐系统能够立即给他推荐相关配件，那么肯定比第二天再给用户推荐相关配件更有价值。很多推荐系统都会在离线状态每天计算一次用户推荐列表，然后于在线期间将推荐列表展示给用户。这种设计显然是无法满足实时性的。与用户行为相应的实时性，可以通过推荐列表的变化速率来评测。如果推荐列表在用户有行为后变化不大，或者没有变化，说明推荐系统的实时性不高。&lt;/li>
&lt;li>推荐系统需要能够将新加入系统的物品推荐给用户。这主要考验了推荐系统处理物品冷启动的能力。对于新物品推荐能力，我们可以利用用户推荐列表中有多大比例的物品是当天新加的来评测。&lt;/li>
&lt;/ul>
&lt;h2 id="健壮性">健壮性&lt;/h2>
&lt;p>这里有点类似软件工程中的理论，健壮性就是指一个系统防止攻击（作弊）的能力。类似于搜索引擎，如果在推荐系统中能让自己的生产的信息成为热门推荐那将会带来巨大的利益，因此在设计推荐系统时应考虑到健壮性，通过模拟攻击等行为对其进行有效防范，确保在推荐上不会受到干扰。&lt;/p>
&lt;h2 id="商业目标">商业目标&lt;/h2>
&lt;p>推荐系统也是需要考虑自身商业目标的，很多时候推荐系统设计上也需要考虑到提高商业目标，但由于产品形态的不同，自身定义的商业指标也可能有所不同，比如说电子商务中利用推荐系统提高销售额，广告利用推荐系统投放用户感兴趣的广告进而提高点击率，流媒体网站利用推荐促使用户活跃度 &amp;amp; 互动提升等等。因此推荐系统除了满足用户、内容提供者的利益，也要利用推荐系统实现商业目标上的提升。&lt;/p>
&lt;h1 id="总结">总结&lt;/h1>
&lt;p>在上面我们提到了推荐系统的基本概念、用途、组成以及如何评价一个推荐系统是否足够好。所以也正是我们一直强调的推荐系统主要的目标是为了平衡三方的利益，能够让用户满意、内容提供者满意、能让推荐系统更好的改进发展。&lt;/p>
&lt;p>当然我们在利用上述指标进行评测时也要考虑到实际情况，比如我们的目标是什么、用户所处的物理环境、时间环境、物品或内容本身的属性等等，这也是在产品设计上经常提到的，要从实际具体的使用场景去评价一款产品或是一个算法的优缺点。&lt;/p></description></item><item><title>《OKR工作法》阅读笔记</title><link>https://fishxy.github.io/post/reading/okr%E5%B7%A5%E4%BD%9C%E6%B3%95%E9%98%85%E8%AF%BB%E7%AC%94%E8%AE%B0/</link><pubDate>Tue, 16 Jul 2019 00:00:00 +0000</pubDate><guid>https://fishxy.github.io/post/reading/okr%E5%B7%A5%E4%BD%9C%E6%B3%95%E9%98%85%E8%AF%BB%E7%AC%94%E8%AE%B0/</guid><description>&lt;div class="douban_show">
&lt;div id="db9787508679099" date-dbid="9787508679099" class="douban_item post-preview">&lt;/div>
&lt;/div>
&lt;p>这两天看完了《OKR工作法》，书籍本身篇幅比较小，但是内容主题要靠两天消化还是不容易的。主要内容还是讲解了OKR工作法的基本概念，然后利用一个创业公司的故事来讲解实践OKR过程中可能会出现的问题，以及如何正确理解运用OKR和OKR给企业带来的好处。&lt;/p>
&lt;p>&lt;code>OKR：Objectives and Key Results 即目标与关键成果法，主要是用于跟踪目标以及其完成情况的一种工具和管理方法。&lt;/code>&lt;/p>
&lt;p>OKR 的基本概念这里就不在赘述了，比较好理解，它背后的思路也是比较简单的 —— 保持清醒，关注真正的目标，定期（周）进行review。通读此书，我比较认同 OKR 中的几点：&lt;/p>
&lt;ol>
&lt;li>设立目标，并与大家定期进行同步。书中提到一句乔治巴顿的名言，&amp;ldquo;不要告诉下属怎么做，只要告诉他你想要什么，他们就会给你满意的结果&amp;rdquo;，下属、同事希望明确的是工作的目标和方向，所以设立一个明确的目标并不断的强调给大家，大家就会朝着正确的方向去做。&lt;/li>
&lt;li>目标要正向积极，能够鼓舞团队。这与我之前看的另一本书《决策与理性》中提到的一点不谋而合，&amp;ldquo;人在面临风险时都是倾向于规避，而在面临利益时都是趋向性的&amp;rdquo;，比如说同样关于产品质量的目标，我将关键结果设定为&amp;quot;问题率小于20%&amp;ldquo;和&amp;quot;支撑团队完成80%以上的使用场景&amp;quot;的结果是一致的，但是人们更倾向于后者这种积极能够鼓舞团队的选择。&lt;/li>
&lt;li>目标不宜过多，要有优先级。&amp;ldquo;一次说太多，就和什么都没说一样&amp;rdquo;，重要的目标太多就等同于大家都不重要，实际工作中这一点也很明显，作为一个产品管理人员，如果没有把开发需求确定好优先级，开发人员就不清楚先做哪个后做哪个。这点跟个人时间管理很相似，目的不是为了做更多的事情，而是在有限的时间内聚焦，做价值更高的事情，在 OKR 中就是做关键目标，符合公司目标、业务目标的事情。&lt;/li>
&lt;li>目标要有挑战。OKR 中提到了信心指数，即对设立的目标评估一个信心指数，最好是在 40%~60% 的一个范围，过低信心指数的目标由于完成难度大，会造成大家对 OKR 的反感，而过高信心指数的 OKR 目标，使团队故意隐藏实力，那么 OKR 的意义也就不存在了。所以最好设立一个比较有挑战性的目标，激发团队尽最大努力完成。&lt;/li>
&lt;li>其他的就是关注于目标设立的本身，目标需要能够可量化形成 key result，有具体的时间范围，能够落实到独立团队执行目标等等。&lt;/li>
&lt;/ol>
&lt;p>概括来说，OKR 应当是由&lt;strong>一个极致明确的目标和该目标的几个关键衡量结果指标组成&lt;/strong>。&lt;/p>
&lt;p>在践行过程中，它实际上是和《原则》中提到的五步法有很大的相似处 —— 定目标、找问题、找根源、定方案、执行，在 OKR 中最后再加上定期的 review，然后重复这一过程。&lt;/p>
&lt;p>相比于&amp;quot;年底销售额2000w&amp;quot;这种简单粗暴的 kpi，OKR 更像是囊括了以往传统的 kpi，管理的本质是在于发挥团队最大的效能，而 OKR 中最有魅力的地方就是它并没有降低或是掩盖 &amp;ldquo;2000w&amp;rdquo; 这个 kpi，而是利用一个更高的目标鼓舞团队，发挥团队每个人的力量，这也是 OKR 方法论中提到的，OKR 需要大家都参与进来，整个过程包括最后成功庆祝会或是失败的反思。&lt;/p>
&lt;p>目前公司使用的管理方式类似一种 OKR 的变化，它结合了 OKR 目标的优先级、时效性、信心指数以及可量化的 KR 等等。其中我觉得践行起来最重要的就是同步和沟通，尽管目标在一开始就已经确定好了，但是随着工作的进展，只有时刻同步提醒，才能保证目标一直记在心中，并贯穿后续的工作。&lt;/p>
&lt;p>关于 OKR 的方法论，我就不在啰嗦了，推荐这本书，或者说其实是一本小册子，希望读完后给你带来启发，期待这套 OKR 工作方法能够帮助我们实现自己的目标，和企业共同成长实现双赢。&lt;/p></description></item><item><title>plum niz micro84 蓝牙双模键盘初体验</title><link>https://fishxy.github.io/post/diary/0710-nizmicro84keyboard/</link><pubDate>Wed, 10 Jul 2019 00:00:00 +0000</pubDate><guid>https://fishxy.github.io/post/diary/0710-nizmicro84keyboard/</guid><description>&lt;p>以前对键盘的需求不大，都是随随便便买一把 20 上下的有线键盘将就着用，搬家的时候就丢掉，到新的地方就再买一把。不过平常不论是打文档，还是博客码字，对输入体验还是比较有期望的，所以最近简单看了一些介绍和评测，入手了一把 plum niz micro84 蓝牙双模键盘。&lt;/p>
&lt;h1 id="新入手键盘怎么验货">新入手键盘怎么验货&lt;/h1>
&lt;ol>
&lt;li>外观整体有没有问题&lt;/li>
&lt;li>放在桌子上是否平稳，支脚是否灵活，支脚立起来稳定性怎么样&lt;/li>
&lt;li>看看每个按键是否完好，连接电脑测试下是否输入、功能正常&lt;/li>
&lt;li>……&lt;/li>
&lt;/ol>
&lt;p>上面就是自己想到的，其他的可以按照自己习惯补充吧。&lt;/p>
&lt;h1 id="plum-niz-micro84-使用体验">plum niz micro84 使用体验&lt;/h1>
&lt;p>先上正片，换了部分的侧刻的键帽&lt;/p>
&lt;p>&lt;img src="https://fishw.xyz/blogdata/img/20190710234212.jpg" alt="">&lt;/p>
&lt;h2 id="蓝牙连接">蓝牙连接&lt;/h2>
&lt;p>蓝牙连接比较方便，而且可以多设备配对切换，连接方式&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre class="chroma">&lt;code class="language-fallback" data-lang="fallback">1.首先打开按住左侧电源键 1s 以上打开 niz 键盘，f12 的蓝牙电源等会有提示
2.按住 fn+f9~11 任意一个知道指示灯快闪进入配对模式
3.连接设备上搜索设备 “Bluetooth keyboard”，点击连接会出现连接密码
4.在键盘上输入对应连接密码，回车键，done！
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>由于我没有仔细看电脑上的提示，所以在出现链接密码的时候没有在键盘上输入，我就跟电脑相看两不厌的待了几分钟，直到我意识到问题。&lt;/p>
&lt;h2 id="更换键帽">更换键帽&lt;/h2>
&lt;p>卖家赠送了拆键器，所以键帽拆装起来很方便，但是需要注意的一点是，因为 shift、backspace、enter 和空格这种大键，所以最好不要暴力拆卸，而且拆下后也不方便安装。&lt;/p>
&lt;h2 id="fn-键">fn 键&lt;/h2>
&lt;p>键盘外设中通常都会有 fn 键，用于扩充键盘功能，比如说多媒体、配对设备切换等等。&lt;/p>
&lt;p>niz micro84 键盘上能看到在一些键位上侧刻有其他功能图标或数字，有的还会有两个，fn 键 + 对应键位 就是用于实现侧刻上的功能，对于有两个扩充功能就利用 左 fn/右 fn 进行区分。&lt;/p>
&lt;p>所以实测除打字外的基本需求，fn 的多媒体功能键、模拟鼠标和节能模式切换应该是目前使用最多的了。&lt;/p>
&lt;h2 id="其他优势">其他优势&lt;/h2>
&lt;ol>
&lt;li>功能完整，静电容，寿命长，反应灵敏(标准的客套话)&lt;/li>
&lt;li>84 键布局用起来很舒服，我这篇文章就是正在用它码出来的，用作码字或开发来说，高频的使用场景基本都可以覆盖到了，至于玩游戏由于我现在 PC 上不玩游戏所以不确定&lt;/li>
&lt;li>最主要的是价格，能够在静电容这种相对小众且价格居高不下的市场上占据一块，价格、性价比上都配得上它，希望国货越来越好吧&lt;/li>
&lt;/ol>
&lt;h1 id="final">final&lt;/h1>
&lt;p>总的来说这把键盘码字还是很舒服的，作为不想投入 几k 成本的解毒键盘是很合适的，至于它能陪我多久，能在这个博客上再敲多少字，就让时间去考验吧。&lt;/p>
&lt;p>最后再放两张实片：&lt;/p>
&lt;p>&lt;img src="https://fishw.xyz/blogdata/img/20190710232942.jpg" alt="">
&lt;img src="https://fishw.xyz/blogdata/img/20190710232923.jpg" alt="">&lt;/p></description></item><item><title>0709-为什么国内定制化项目赚钱难</title><link>https://fishxy.github.io/post/product/0709-%E4%B8%BA%E4%BB%80%E4%B9%88%E5%9B%BD%E5%86%85%E5%AE%9A%E5%88%B6%E5%8C%96%E9%A1%B9%E7%9B%AE%E8%B5%9A%E9%92%B1%E9%9A%BE/</link><pubDate>Mon, 08 Jul 2019 00:00:00 +0000</pubDate><guid>https://fishxy.github.io/post/product/0709-%E4%B8%BA%E4%BB%80%E4%B9%88%E5%9B%BD%E5%86%85%E5%AE%9A%E5%88%B6%E5%8C%96%E9%A1%B9%E7%9B%AE%E8%B5%9A%E9%92%B1%E9%9A%BE/</guid><description>&lt;p>最近经常看到 SaaS 相关的文章，身边也有创业做行业 + SaaS 模式产品的（前阵子也拿了个这样的 offer 🤣），创业媒体这几年每年都在鼓吹“SaaS 元年”，然而我这次不想讲 SaaS，换个角度讲讲 SaaS 前身——企业服务定制项目，为什么不赚钱。&lt;/p>
&lt;p>一般来说，早期的企业服务类服务是以乙方入驻甲方，进行IT信息化解决方案的项目实施形式，因此常见的在乙方和甲方的合作过程中会存在两种计价模式：&lt;/p>
&lt;p>第一种是项目制，按照销售合同，按照工作内容定价进行计价付费，比如说这一单一口价多少钱、拆分对应到那些模块功能需求需要多少钱。&lt;/p>
&lt;p>另一种是按照人天进行计价，这种简单说就是客户直接包人头，计价按照人天 x 单价进行结算。&lt;/p>
&lt;p>人天项目在单价上就已经把利润率计算在内，因此这种计价模式的整体利润波动不会很大，进展顺利，平均下来也会有 20%~40% 的利润率；相比之下项目制的单价其实是比人天项目单价要高的，虽然按照正常规划进行的话，项目制合同利润基本能够达到 40%~50%，但由于多数项目进展并不会一帆风顺，因此实际情况中项目制合同利润大概会在 0~80% 区间内，所以一旦项目做不好就亏损了。&lt;/p>
&lt;p>在项目管理中常常提到范围、进度和成本三个关键要素，而在一个定制化项目中范围通常是导致赚钱难的主要原因。比如说：&lt;/p>
&lt;ul>
&lt;li>项目需求不明确&lt;/li>
&lt;/ul>
&lt;p>中国市场的定制化项目多是服务于传统企业——制造业、零售业等客户，一些客户对于信息化没有具体概念，导致描述自己需求时不明确，在产品做出来之前客户也没有一个概念清楚这个产品是什么样的。尽管现在一些成规模的企业会提前请一些咨询公司进行服务，但由于企业客户在项目过程中仍然保留着主导地位，所以情况并没有太大的改善。&lt;/p>
&lt;p>此外目前中国市场对于定制化项目的定义不是建立在提高运营效率、降低成本的思想上，而是管理者考虑方便自己管理使用的，因此实际很多项目的提出发起者是管理层，而项目交付产品的使用者是一线员工。&lt;/p>
&lt;p>于是项目中就会经常出现产品做出来了，验收时客户的使用者，觉得没有达到预期，客户也不会付钱，但是项目已经开发延续一段时间了，工作量也付出了，所以为了长期客户，只能考虑是降低收益，走变更阶段弥补项目偏差。&lt;/p>
&lt;ul>
&lt;li>客户业务复杂&lt;/li>
&lt;/ul>
&lt;p>定制化建立一个可交付的产品，开发一个系统是比较容易的，但是在系统背后是关于客户业务的理解，因此由于每个客户业务不同、业务复杂——组织结构、安全验证、硬件设施、软件适配等等琐碎事情都会造成成本的直线上升，当然这部分工作在每个不同的企业客户中都需要进行，要做一个十分符合客户业务需求的产品是不容易的。&lt;/p>
&lt;ul>
&lt;li>市场环境因素变化&lt;/li>
&lt;/ul>
&lt;p>定制化项目往往周期长，但中国市场和政策变化快，当下按照客户业务需求确定好进行定制化开发，等到项目进行交付时可能会遭遇到市场政策、管理模式的变化，开发的产品无法满足现在的需求，导致客户不会付款。&lt;/p>
&lt;ul>
&lt;li>付款方式对供应商不利&lt;/li>
&lt;/ul>
&lt;p>目前常见定制化项目合同中的付款方式采取的是“预付费+阶段/中期付费+验收上线后尾款+10%~20% 的后期服务费”形式。按照我们之前说的正常规划下的利润率能够达到 40%~50%，但是如果客户在验收时不通过或是其他原因导致尾款和后续费用不付，那项目很可能就会亏损。或是客户在项目期间产生变更以及延期验收时间，那么项目由于工期延长所负担的人力成本增加，综合起来项目又亏损了。&lt;/p>
&lt;p>我们发现，在定制化项目实施的过程中，工程除预付款部分其实是供应商自行垫付的成本，所以能够看出，付款方式实际上是更有利于企业客户的。&lt;/p>
&lt;ul>
&lt;li>项目制空档期的人员成本&lt;/li>
&lt;/ul>
&lt;p>项目 A 经过一段时间结束，在项目 B 开始之前人员处于没有项目的状态，由此产生的人员闲置又会增加企业的成本。&lt;/p>
&lt;p>综上，我们能够看出企业服务市场中定制项目赚钱是很难的，所以供应商也会寻求对自己更有利的提高利润、减少成本的改革机会，比如进行 SaaS 转型——减少人员、部署、定制开发成本，进入细分领域——专精行业解决方案提高自身定价权，签订长期合作项目——保证项目盈利、市场稳定……&lt;/p></description></item><item><title>浅谈时间管理</title><link>https://fishxy.github.io/post/diary/%E6%97%B6%E9%97%B4%E7%AE%A1%E7%90%86/</link><pubDate>Thu, 06 Jun 2019 00:00:00 +0000</pubDate><guid>https://fishxy.github.io/post/diary/%E6%97%B6%E9%97%B4%E7%AE%A1%E7%90%86/</guid><description>&lt;p>时间管理是一个比较宽泛的话题，之前也有写过关于自己工作流程、生活中做事流程的文章，那篇里还是比较倾向于实际操作，行动，对于理论性、概念性的知识并没有进行阐述，所以既然说授人以鱼不如授人以渔，索性就简单讲一讲自己关于时间管理的理解，当然这里可能还是会涉及到自己工作、生活的实际场景。&lt;/p>
&lt;p>谈到时间管理，我们先简单回答几个问题——什么是时间管理？为什么需要进行时间管理？最终希望达到什么目标？&lt;/p>
&lt;h1 id="什么是时间管理">什么是时间管理&lt;/h1>
&lt;p>时间管理就是有效的运用时间，降低变动性，运用技巧、技术和工具帮助我们完成工作、任务，实现目标。&lt;/p>
&lt;h1 id="为什么要进行时间管理">为什么要进行时间管理&lt;/h1>
&lt;p>这就要提到我们日常生活、工作中经常遇到的情况了，我们无论生活还是工作，事情主要的特点还是&lt;/p>
&lt;ul>
&lt;li>头绪多，琐碎事情多&lt;/li>
&lt;li>需要依赖他人工作成果完成工作&lt;/li>
&lt;li>要看住一些长远的、模糊的目标&lt;/li>
&lt;li>……&lt;/li>
&lt;/ul>
&lt;p>那这也就意味着，我们会遇到很多问题，比如说：&lt;/p>
&lt;ul>
&lt;li>我们会面临大量碎片时间如何进行分配的问题&lt;/li>
&lt;li>面临依赖他人以及被他人依赖的问题、也会有被人打断的风险&lt;/li>
&lt;li>要主动推进一些目标，处理大量的&amp;quot;重要但不紧急&amp;quot;的任务&lt;/li>
&lt;li>……&lt;/li>
&lt;/ul>
&lt;h1 id="最终希望达到的目标">最终希望达到的目标&lt;/h1>
&lt;p>做好时间管理就是为了能够妥善的解决上述问题，同时也是为了能过够&lt;/p>
&lt;ul>
&lt;li>确保所有（有价值）的任务、工作能得到妥善的处理&lt;/li>
&lt;li>确保“依赖他人”的任务也能顺利进行&lt;/li>
&lt;li>确保协作中“衔接环节”耗时较少&lt;/li>
&lt;li>确保能够有足够的时间去做“重要而不紧急”的事情&lt;/li>
&lt;/ul>
&lt;p>这也就是我们践行时间管理的目标，进而通过大量的练习和实践，能够提高我们对任务时间合理调度、带人带事顺利进行以及管理任何组织完成“重要而不紧急”工作的程度和能力，这也决定了我们未来的潜力和最终的高度。&lt;/p>
&lt;p>（PS:重要而不紧急的事情举例——个人职业能力的提升和进阶、培养新人、行业知识的调研与积累等等……）&lt;/p>
&lt;h1 id="怎么做">怎么做&lt;/h1>
&lt;p>那最重要的，既然时间管理能带来这么些好处，那时间管理应该怎么做？——IOSR，即Inbox、Organize、Schedule、Review&lt;/p>
&lt;p>下面我具体展开来解释一下。&lt;/p>
&lt;h2 id="inbox">Inbox&lt;/h2>
&lt;p>inbox即为收件箱，我们把需要收集的对象——可能是上网看到的一篇文章，可能是突然想到的idea，可能是刚好别人交代的等等一系列的事情和信息汇总在inbox收集箱里，这里就有人会说了，接到任务或消息我自己脑子记下来就好了啊？为什么要提出一个inbox的概念呢？&lt;/p>
&lt;p>这里要说明一下，inbox的最主要的目的是将信息和线索汇总到同一个地方，借鉴公司里数据仓库的概念，我们利用inbox解耦数据的收集和处理过程。由于实际生活和工作中可能面临着很多的数据源输入，不同数据源（可能是个人的阅读、微信的聊天、邮件的通讯等）的更新频率可能也不同，如果分散精力多处关注的话会出问题，也就是会受到很多非直接相关因素的干扰，那利用inbox我们可以确保数据不会遗漏，减少对大脑精力的消耗，让做事更专注，同时也能批量处理问题。&lt;/p>
&lt;h2 id="organize">Organize&lt;/h2>
&lt;p>当我们在 inbox 中收集了大量的信息、待做的事情，下一步就是要整理收件箱的内容，计划这些事情应该如何去做了，最终目的是为了清空 inbox。那面对 inbox 中的内容，应该如何合理的安排呢？&lt;/p>
&lt;p>对于 inbox 中收集的信息，比如说谋篇阅读、文章等等，或是某段话，如果是低价值的信息，经过过滤后可以直接删除，如果是高价值的信息，则可以选择进入知识库，以便于后续温习加深理解。&lt;/p>
&lt;p>对于 inbox 中待做的事情，如果是 2 分钟(短时间)可以做完的，我们的原则是马上动手做，就地解决它；如果是 2 分钟做不完的事情，那就需要进入我们的执行系统、todolist 中。&lt;/p>
&lt;h3 id="执行系统">执行系统&lt;/h3>
&lt;p>一个好的执行系统应该包含项目 project 和 todo。项目 project 是用来组织所有工作，是区别于 todo，不是一个 todo 能完成的事情，每个项目 project 应当对应一个 todolist，也就是一系列的 todo 完成的。&lt;/p>
&lt;p>而 todo 重点在于做（do），即应当是能够量化、能够明确具体行为的且可以执行的要做的事情。同时可以人为设定一个相对简单的阈值，比如说我们规定一个 todo 的工作量是 0.5~1 天内可以做完的，然后每天挑选若干 todo 来做，这样保证每天的 todo 不至于过多或过少。如果 todo 太长的话就会无法挑选每天要做的事情，这时候我们需要把这一个 todo 进行拆解，一个拆成多个，或是将 todo 直接转化成一个 project。&lt;/p>
&lt;p>除此之外，建立一个 todo 关键的地方在于定义开始执行的时间，如果我们计划在哪天进行，就把这个 todo 放到那一天，这样在那天之前，我们都不会去关注它，从而使我们专注于当前的事情，不被干扰到。对于截止时间一般不用管，因为首先截止时间不像开始时间那么好控制，另外我们把 todo 拆解的足够小，只要开始就能很快按计划结束，这样的话截止时间的意义就不是很大了。&lt;/p>
&lt;h3 id="eg-如果接到任务怎么办">e.g. 如果接到任务怎么办？&lt;/h3>
&lt;p>接到任务，如果是需要自己做的，那就立即导入到自己的执行系统，确保事情统一管理，每天定时同步给自己。如果能够确定自己不会忘记这件事情，也可以选择不导入。&lt;/p>
&lt;p>如果是需要团队成员做的事情，那就需要建立 todo，定期排查团队成员做事成果，主要可以在关键节点设置检查点、在最终设置检查点，确保最后工作完成的质量。&lt;/p>
&lt;p>如果是依赖他人成果工作的，首先要确保有能够具体量化的可执行下一步行动——比如说调研对方工作成果、评估后续工作方向和工作量，同时设置多个检查点。如果是长期的合作项目，那就需要安排多个中间过程的检查点——比如说，利用私人关系打听一下对方目前进展、2~3 天经常问一下进度、要求 review 对方工作或是要求参与到对方验收过程等等。&lt;/p>
&lt;p>最终我们的目的是能够清空 inbox，把 inbox 中的信息流向应该去的地方，同时按照计划完成执行系统中的任务。&lt;/p>
&lt;h2 id="schedule">Schedule&lt;/h2>
&lt;p>有了任务执行系统，有了一系列的 todo，下一步要觉得是今天要做什么。&lt;/p>
&lt;p>&lt;code>EAT THAT FROG&lt;/code>&lt;/p>
&lt;h3 id="action-list">Action list&lt;/h3>
&lt;p>我们每天按照 frog 的重要程度，投入精力的程度，挑选 1~3 只 frog 进行解决，这些 frog 是最重要的、必须要完成的，也是最难的、需要精力旺盛且整块时间投入的任务。&lt;/p>
&lt;p>再挑选 3~7 只蝌蚪，没那么重要的、拖一拖还能接受，且消耗精力比较小、可以在吃完 frog 的间隙或者碎片时间就完成的任务。&lt;/p>
&lt;p>最终我们的目标是清理所有 frog 和清理一些蝌蚪，这里需要注意，如果蝌蚪（不紧急）长时间不处理，就会长成青蛙（紧急）。&lt;/p>
&lt;h3 id="slice">Slice&lt;/h3>
&lt;p>如果 frog 吃不下的时候，就需要拆解 frog(任务)，将 frog 拆解成一个个自己能够接受的，本质上要能有节奏的进行工作。&lt;/p>
&lt;h3 id="time">Time&lt;/h3>
&lt;p>预估工作的总时间，尝试着安排一天的工作量，确保 frog 总时间在 6 小时内，预留出工作的弹性时间，确保不会被精力下滑、临时有事打断。&lt;/p>
&lt;h2 id="review">Review&lt;/h2>
&lt;p>当我们按照上述步骤，完成了自己计划的各项任务后，合适的 review 可以帮助我们更好的确定下一步行动。这里需要说明的是，review 与复盘的区别，review 是定期的，是为了帮助我们寻找到下一步的行动，而复盘则是为了回顾之前的工作，寻找区别于过去的更好的解决方式。&lt;/p>
&lt;p>对于不同的内容进行 review 的侧重点也是不同的。&lt;/p>
&lt;p>&lt;strong>执行系统project、todo&lt;/strong>&lt;/p>
&lt;ul>
&lt;li>是否已经完成(完成的需要归档或者删掉)&lt;/li>
&lt;li>是否有明确的下一步行动(重点是下一步)&lt;/li>
&lt;li>是否需要调整计划&lt;/li>
&lt;/ul>
&lt;p>&lt;strong>团队team&lt;/strong>&lt;/p>
&lt;ul>
&lt;li>团队成员的情绪、价值观问题&lt;/li>
&lt;li>团队的整体目标同步、成长目标以及下一步达到目标的路径是否清晰&lt;/li>
&lt;/ul>
&lt;p>&lt;strong>个人路径&lt;/strong>&lt;/p>
&lt;ul>
&lt;li>个人成长是否需要新的行动&lt;/li>
&lt;li>会有哪些风险点，需要进行调整计划&lt;/li>
&lt;/ul>
&lt;p>我们 review 的时机可以是 weekly、或者给自己设置一个循环的 todo 提醒进行复盘。&lt;/p>
&lt;h1 id="小结">小结&lt;/h1>
&lt;p>了解了上面的一些基本概念和思想，那落地起来就很容易了，这篇文章就不会再进行工具或者 App 的推荐了，只要大家找到适合自己的工具，构建适合自己的工作流程，按照收集、组织、计划、执行、回顾一系列步骤多练习几次就可以找到适合自己的节奏了。&lt;/p>
&lt;p>最后还有几个关于时间管理的问题进行澄清一下：&lt;/p>
&lt;p>Q1：时间管理能让我轻松么？&lt;/p>
&lt;ul>
&lt;li>能，减少心理负担，降低心理压力&lt;/li>
&lt;li>不能，要做的事情不会减少，只是被你整理过了&lt;/li>
&lt;/ul>
&lt;p>Q2：我觉得有很多事情没有时间做&lt;/p>
&lt;ul>
&lt;li>可能性 1：时间利用不够充分，需要加强时间管理能力，了解自己的做事节奏，按自己的节奏掌控自己要做的事情&lt;/li>
&lt;li>可能性 2：事情就是单纯的多，不可能做完，那如何解决
&lt;ul>
&lt;li>断舍离，选择真正有价值的，重要程度高的事情去做&lt;/li>
&lt;li>培养、授权，将事情分派给别人去做，团队的力量是巨大的&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;p>Q3：时间管理的本质是？&lt;/p>
&lt;ul>
&lt;li>提高你单位时间的价值
&lt;ul>
&lt;li>不会让你做的更快，而是让你做更有价值的事情&lt;/li>
&lt;li>充分利用碎片时间解决碎片问题&lt;/li>
&lt;li>提高自己的&amp;quot;精力投入回报率&amp;quot;&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>有意识的放弃
&lt;ul>
&lt;li>放弃某些不用做的&lt;/li>
&lt;li>放弃某些不用自己做的&lt;/li>
&lt;li>放弃自己的舒适区&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul></description></item><item><title>0529-技术与产品</title><link>https://fishxy.github.io/post/diary/0529-%E5%85%B3%E4%BA%8E%E6%8A%80%E6%9C%AF%E4%B8%8E%E4%BA%A7%E5%93%81/</link><pubDate>Wed, 29 May 2019 00:00:00 +0000</pubDate><guid>https://fishxy.github.io/post/diary/0529-%E5%85%B3%E4%BA%8E%E6%8A%80%E6%9C%AF%E4%B8%8E%E4%BA%A7%E5%93%81/</guid><description>&lt;p>由于一直参与的是ToB、后台、偏技术的产品工作，相较于C端产品经理，我也会更多关注、了解一些技术相关的问题，不过有些时候还是会陷入在两个dev之间传话的状态，所以我总在思考、反思，尝试着寻找到自己更好的定位，企图能够定义出：偏技术的产品经理的定位是什么？产品经理究竟要对技术了解到什么程度？如何在一个技术驱动的产品团队中发挥产品经理的最大价值？&lt;/p>
&lt;p>首先这里先要说明，偏技术的产品经理，一是指当前业务方向是技术型驱动类的产品方向层面的，（业务）偏技术的产品经理；二是指本身（人）是技术型驱动做事的产品经理。不论哪一种，我认为偏技术的产品经理的定位是：一切从用户价值出发，推动现有技术落地和新技术的研究的产品经理。&lt;/p>
&lt;p>推动现有技术落地，强调的是能够针对需求、业务目标，能够进行合理的决策，排列优先级，更要能供从技术和业务两方面去看待问题，形成一个合理的解决方案，并推动现有技术的能力，把解决方案形成可落地的实施方案。&lt;/p>
&lt;p>推动新技术的研究，指的是一方面需要能够对未来业务的延展性、发展方向有一个明确的理解，同时尽可能的预见性当前技术能力的风险点，以此推动技术朝着未来的业务方向发展。&lt;/p>
&lt;p>关于产品经理对技术要了解到什么程度？这里引用前人的一番言论：&lt;/p>
&lt;p>第一层：知道什么能做，什么不能做。即知道技术边界，对于任何需求都能做出【支持】或是【当前不支持】的判断。&lt;/p>
&lt;p>第二层：知道什么好做，什么不好做。即需求超出了目前的技术边界，或是说当前【不能做】时，有能力权衡需求与改动的初步方案，最终甚至是决策、推动他人决策，形成落地方案，且有能力与技术人员进行高效沟通。&lt;/p>
&lt;p>第三层：知道什么该做，什么不该做。即能够明确技术、产品定位，能够从业务发展角度看到问题，帮助技术人员、帮助产品系统找准定位，跟随业务一同发展。&lt;/p>
&lt;p>理解了上述内容，就很容易回答最后一个问题了，如何在技术驱动的团队中发挥产品经理的最大价值？就是要能够推动当前技术实现业务落地，又要有足够的前瞻性，推动技术朝着未来的业务方向发展。&lt;/p></description></item><item><title>0528-胡言乱语</title><link>https://fishxy.github.io/post/diary/0528-%E9%97%B2%E8%A8%80%E7%A2%8E%E8%AF%AD/</link><pubDate>Tue, 28 May 2019 00:00:00 +0000</pubDate><guid>https://fishxy.github.io/post/diary/0528-%E9%97%B2%E8%A8%80%E7%A2%8E%E8%AF%AD/</guid><description>&lt;h1 id="关于制定方案-如何决策">关于制定方案 如何决策&lt;/h1>
&lt;p>Q1：根据什么来决策？&lt;/p>
&lt;p>A1：将简述题转化为选择题，决策的最终目标是形成一定结论、方案，那么既然是这样，就可以将问题转化为几种方案对比中选择最优或是相对优的，首先确定我们最终的目标、结果，然后通过现有方案和要进行选择的方案之间进行对比，得出最终结论。&lt;/p>
&lt;p>Q2：谁来决策？&lt;/p>
&lt;p>A2：能够自己敲定的可以由自己进行决策，利用数据、其他信息或是专业人员提供的思路进行辅助判断；如果需要相关利益人员知情的，可以根据需要，选择是只通知决策结果，或是附带决策依据将决策结果通知出去；如果不能由自己决策的，或是需要其他利益相关方帮忙决策的，那抛出问题，然后提供能够给对方带来帮助的全量信息进行决策辅助。&lt;/p>
&lt;p>Q3：不能形成结论怎么办？&lt;/p>
&lt;p>A3：如果不能形成最终的结论，或是发现了新的问题，那么最终可能需要依照上述得到的结论寻找新的解决方案，或是上面的方案择优选择能够接受的，或者是放弃这次决策。&lt;/p>
&lt;h1 id="关于产品升级">关于产品升级&lt;/h1>
&lt;p>平台级产品，在于提供服务，提供能力，向外延伸，赋能给合作伙伴、接入平台的一方，对于升级功能时，通知很重要。&lt;/p>
&lt;p>一旦删除或是不再支持某一功能、接口，要系统考虑好后续的连锁反应，为确保不会影响接入的一方，要尽量平滑过渡，比如一个api的删除，可以先删除掉实现逻辑，不要直接把接口删除，容易引起未来的及修改一方的产品质量，可以制定一个策略，通知到具体在一段时间后(某一时间点)，不再支持这个api、功能，请用户注意升级，然后再进行删除。&lt;/p>
&lt;p>以上只是两个小case，需要注意的是，平台产品的多利益方协作间，需要强有力的推动能力、推动事情持续运转，以及推广时的服务、通知意识，确保信息触达到所有相关人员。&lt;/p></description></item><item><title>0514-NFC支付为什么没有二维码普及</title><link>https://fishxy.github.io/post/diary/nfc%E6%94%AF%E4%BB%98/</link><pubDate>Tue, 14 May 2019 00:00:00 +0000</pubDate><guid>https://fishxy.github.io/post/diary/nfc%E6%94%AF%E4%BB%98/</guid><description>&lt;p>&lt;img src="https://fishw.xyz/blogdata/img/20190516202913.png" alt="同事给我分享的新闻">&lt;/p>
&lt;p>今天同事给我分享了一个新闻。苹果发布了一个用于apple pay的NFC贴纸，只要用户把手机贴近贴纸就能完成。NFC配对支付。苹果计划在线下推广这个服务供用户使用。作为苹果粉的同事当然很激动。然后我说但是现在有二维码支付了呀，我感觉这个东西推广起来比较难。同事给我讲了他的看法，他觉得NFC支付要比二维码支付很方便，因为只要靠近一下就可以了，但是二维码你需要把摄像头再打开，然后或者是支付方把二维码打开，双方互相扫才能完成支付动作。他举了一个最常见的例子——就是地铁扫码支付，在临出地铁的时候，有的人可能是网络问题或是其他原因，导致二维码还没打开、加载不出来，但是你用NFC的用户，只要把手机贴上去就可以了。&lt;/p>
&lt;p>我在想的问题是，NFC支付确实很方便，操作体验更好，但是为什么还是没有二维码更普及呢？&lt;/p>
&lt;p>首先我觉得第一点，就是这个智能手机设备问题，虽然说现在智能手机很普遍，但是问题是NFC并不是每一个智能手机都配备的功能，对于一些低端机市场，就没有NFC功能。但是相反，摄像头和二维码，这个每台智能手机都配备的基础功能，而且只要网络顺畅，二维码支付也是很方便就可以实现的。&lt;/p>
&lt;p>第二点是，尽管有些智能手机也是配有NFC支付功能，但是目前各家厂商的NFC支付标准不同，这导致在适配上也会提高成本，而二维码的规范和标准就相对统一。&lt;/p>
&lt;p>另外还有一点就是，支付是买方卖方双方完成的事项，如果要推广NFC支付的话，在商户端、收款方也要进行大规模的普及，这可能是这其中最困难的一点。&lt;/p>
&lt;p>但实际上来说我还是很赞同同事的观点，我现在平常也在用NFC乘公共交通，NFC在响应速度和操作便利性来说要比二维码方便多了，而且相对也会更安全。如果NFC能够普及开，相信也能大幅提高用户的消费体验。&lt;/p>
&lt;p>&lt;code>下面就是胡扯了，我在想NFC怎么能低成本的普及开呢？&lt;/code>&lt;/p>
&lt;p>小米应该是最先做NFC支付的，他选择的方式是从居民常用的公共交通进行切入，利用miui系统进行推广，同时进行一些免开卡费进行拉新，我不太清楚他会有什么盈利方式，但是这不乏是一个很好的切入方式，选择一个生活中十分高频的场景带动NFC支付。&lt;/p>
&lt;p>那如果说，目前新零售上能否用上这套模式呢？京东、苏宁、天猫小店进行NFC设备的配备，我想目前主要的难点还是在于配对成本要比二维码高太多了，ROI太低可能是阻碍NFC普及的最大阻力。&lt;/p>
&lt;p>所以目前可见的，用户智能机的NFC都使用在了——替代某一类生活场景中已有NFC使用的产品，比如公交卡、门禁卡等等。&lt;/p>
&lt;p>暂时想不到更好的方式。&lt;/p></description></item><item><title>最近的工作流</title><link>https://fishxy.github.io/post/diary/%E6%9C%80%E8%BF%91%E7%9A%84%E5%B7%A5%E4%BD%9C%E6%B5%81/</link><pubDate>Fri, 05 Apr 2019 00:00:00 +0000</pubDate><guid>https://fishxy.github.io/post/diary/%E6%9C%80%E8%BF%91%E7%9A%84%E5%B7%A5%E4%BD%9C%E6%B5%81/</guid><description>&lt;h2 id="闲扯">闲扯&lt;/h2>
&lt;p>　　逐渐成长，从学校步入社会，从学习到工作，接触的信息越来越多，这就导致要记录、记住的事情也越来越多，生活不再像从前上学那样，只需要靠脑子就能记住所有要做和要准备的东西，这时候就需要一些其他工具辅助我们记忆。”从前车马很慢，书信很远，一生只爱一个人”，因为从前没有智能机和PC这，也没有各种方便的应用app作为工具，所以最早的时候我都是用纸和笔记录下来要做的事情，类似于todo list，记录下所有要做的事情，每完成一项就划掉一项。&lt;/p>
&lt;p>　　那言归正传，文章接下来必然会讲到我自己的工作方式了，我并不是一个应用收集者，对于效率、工作流一类的应用app，我的目的只有一个，让我减少不必要的劳动，让我专注于做高价值的事情，所以我是首先明确目的，确定自己要做什么，然后再去利用工具辅助我。&lt;/p>
&lt;h2 id="阅读管理">阅读管理&lt;/h2>
&lt;p>　　俗话说&amp;quot;活到老学到老&amp;quot;，学习是一阵伴随我们成长的话题，而在互联网时代，知识从未像现在这样，如此方便、廉价的就能获取到，然后对于获取到的知识而言，如果不能消化吸收成为内在，那无异于是在浪费时间，做无用功，因此从最终目标而言，知识增长是要依据于消化吸收的多少，依靠这些知识产生了多少价值。&lt;/p>
&lt;p>　　我阅读的主要来源于—— rss 订阅的碎片化信息和书籍类的完整阅读。&lt;/p>
&lt;p>　　其中我对碎片化信息的态度一直是比较反感的，首先我承认推荐算法技术的成熟，给人们带来更个性化、更精准的触达，但是另一方面，技术也正是利用这一点可以将很多无价值、无意义的内容呈现在大众视野范围内，所以我对于碎片信息的选择时自己进行 rss 订阅。为了更好的获取订阅、阅读消化和高效的吸收，内化成为自己的能力，我利用一些工具辅助自己进行阅读和回顾。&lt;/p>
&lt;blockquote>
&lt;p>&lt;strong>inoreader + pocket + ifttt + github + 有道云笔记&lt;/strong>&lt;/p>
&lt;/blockquote>
&lt;p>　　我利用 inoreader 对 rss 源信息进行收集，然后定期通过对标题和概要进行筛选，将感兴趣和值得再次阅读的文章推送至 pocket 进行保存，如果遇到即时性较高且十分感兴趣的就立马进行阅读，然后再判断是否保存至 pocket 中，这是我对碎片化阅读管理的第一步——&lt;strong>筛选&lt;/strong>。经过筛选后留存在我 pocket 中的文章，一般是值得阅读、值得再次和进行深度阅读的文章，我也会利用碎片时间定期去清空 pocket 的文章，这时如果再次遇到值得收藏或是分析阅读的文章，我会读它进行加星标记为 favorite 文章，再进行归档，然后通过 ifttt 的服务，这篇文章会在我的 github 对应的仓库中建立一个 issue，同时也会在我的 todoist 中建立一个截止日为7天后的包含这篇文章简要信息的 todo，提醒我7天内再次对这篇文章进行 review，而且利用 github 仓库中的 project 功能，可以建立一个 todo/done 的卡片管理，跟踪这些文章的阅读完成情况，以上这是对碎片化阅读管理的第二步——精细化阅读。利用工具相应的功能和服务，不会影响到我们的阅读体验，也不会让我们偏离阅读的重心和本质，最终经历以上两个步骤，在 github issues 中留下的是喜欢且值得消化吸收的文章，这时我在7天之内再对相应的文章进行整理，写下自己的一些理解，记录在我的 有道云笔记 中，争取内化成为自己学到的知识、能力，关闭对应的 issue。这就完成了我碎片化阅读管理的第三步——消化吸收。&lt;/p>
&lt;p>　　以上步骤看起来好像是在折腾，一篇文章转来转去的，实际上这跟上学时候学习、理解、复习的过程很相似，利用工具辅助自己对碎片化信息进行过滤选择、对阅读后的内容整理分析、对一段时间的阅读进度进行跟踪，进一步加深自己的理解，同时锻炼自己的思考能力。&lt;/p>
&lt;p>　　对于书籍类的完整阅读，经常使用的是电子设备进行阅读，文字类我习惯用 kindle，因为它的便携性、文字展示的体验很舒服，然而在 pdf 类的电子书，我现在还是使用的笔记本进行阅读，这类格式多存在与技术类书籍，在 kindle 上的体验实在太差。我在书籍上的选择主要出于这几个目的——一段时间的兴趣、近期接触的事务和工作、想要增强学习的一些方面或技能。因为时间的重要性，我对阅读还是抱有针对性的目的，所以在阅读后都会有很多自己的思考，我希望能够通过阅读带给我精神和的丰富，我希望通过阅读能提高自己的认知，这么说可能有些过于功利，但是如果做事不求高价值回报，那花费的成本也不考虑么？&lt;/p>
&lt;h2 id="日常规划">日常规划&lt;/h2>
&lt;p>　　日常规划，或是说自己的日程、任务管理，主要的目标是对未来的时间做出相应的计划，保证&amp;quot;心里有数&amp;quot;，跟踪记录，在遇到临时状况时可以更好地调整自己的时间和心理，同时在完成任务或是一段时间后，能够复盘回顾自己的结果和效率。&lt;/p>
&lt;blockquote>
&lt;p>&lt;del>google calendar + ifttt + todoist&lt;/del>&lt;/p>
&lt;p>google calendar + todoist&lt;/p>
&lt;/blockquote>
&lt;p>　　&lt;del>借助 google calendar，我将需要做的事情分散在一天的各个时间片段，再利用 ifttt 将事情同步到 todoist 的 inbox 中，然后再将 inbox 中的 todo 进行拆解，分类到具体的 project 中（例如 work、personal 等）这样就完成了我对日程计划的一个初步的记录跟踪。&lt;/del>&lt;/p>
&lt;p>​ 比较蠢，今天才发现原来 todoist 官方就能和 google calendar 进行关联，而且还是双向同步，完美解决我两边信息同步的问题，行吧，就这样吧。(2019年04月13日)&lt;/p>
&lt;h2 id="我的观点">我的观点&lt;/h2>
&lt;p>​ 其实现在关于”效率“、”工作流“、”无纸化“等等主题的文章越来越多，主要内容还是在介绍各类app的功能特点，用户需求不一样，导致市场上的app多样，最后其实同质化的文章都是在介绍不同的app和自己的使用方式。对于此类现象，我的个人观点是，没有强制的规定你必须要用什么样的工具，也没有绝对满足你需求的工具，工具只是用来辅助使用的，要寻找到适合自己的生活方式，利用工具辅助自己去更效率的工作。&lt;/p>
&lt;p>　　《原则》这本书中，提到了一个达成目标的五步通用方法：&lt;/p>
&lt;blockquote>
&lt;p>定目标-&amp;gt;拆问题-&amp;gt;分析问题根源-&amp;gt;定方案-&amp;gt;执行&lt;/p>
&lt;/blockquote>
&lt;p>　　这解释了要做哪些事情，以及需要经历哪些步骤，实际过程中往往在达成目标后需要进一步追踪，所以我又对它增加了一部分：&lt;/p>
&lt;blockquote>
&lt;p>定目标-&amp;gt;拆问题-&amp;gt;分析根源-&amp;gt;定方案-&amp;gt;执行-&amp;gt;&lt;strong>检查-&amp;gt;结果-&amp;gt;复盘&lt;/strong>&lt;/p>
&lt;/blockquote>
&lt;p>　　对于我而言，我所希望和践行的生活方式就是，明确目标，记录分析和拆解任务，确定接下来要做事情，然后按计划执行，并能在完成后有一个良好的复盘总结，所以其实这一过程纸和笔都是能够辅助你完成的事情，这也是我为什么说，工具只是你完成和实现想法的一个辅助，与其花费时间，纠结于选取什么样的工具，不如静下心好好打磨自己和实际践行，一支笔一张纸都是你能实现自己想法的工具。&lt;/p></description></item><item><title>RBAC系统修改</title><link>https://fishxy.github.io/post/product/rbac%E7%B3%BB%E7%BB%9F%E4%BF%AE%E6%94%B9/</link><pubDate>Tue, 12 Mar 2019 00:00:00 +0000</pubDate><guid>https://fishxy.github.io/post/product/rbac%E7%B3%BB%E7%BB%9F%E4%BF%AE%E6%94%B9/</guid><description>&lt;h2 id="背景">背景&lt;/h2>
&lt;p>刚来公司的时候，接手的后台管理产品面临最大的需求就是要改造管理后台的权限体系系统。&lt;/p>
&lt;p>当时产品的权限体系面对后续不断增加的需求，不能完全支撑，也存在很多问题：&lt;/p>
&lt;ul>
&lt;li>代码层定义了多个角色，一个角色的建立到删除都需要一次代码变更后上线才生效，角色有哪些权限和操作也是在代码层面写死的&lt;/li>
&lt;li>给用户分配角色在前台没有统一管理端操作，不支持批量操作，如果给一个用户分配多个角色需要操作多次&lt;/li>
&lt;li>人员/角色没有分组和上下级的概念，只有一个管理员可以对其他所有用户进行操作，实际上针对下属每个项目组/部门级别，应该有分管leader进行统一管理，由leader对下属人员进行操作&lt;/li>
&lt;li>其他关于开发上比较麻烦的问题&lt;/li>
&lt;/ul>
&lt;h2 id="权限本质">权限本质&lt;/h2>
&lt;p>那面向企业的管理系统，由于不同企业之间的管理规范不同，设计一套高弹性、满足所有企业需求的权限管理体系是不可能的，但是基本逻辑是相同的，&lt;strong>&lt;code>即权限的本质，就是规定了哪些用户可以对哪些资源有哪些操作&lt;/code>&lt;/strong>，如果直接为用户主体赋权的话，会导致大量繁杂的劳动，因此这里引出一个关于权限模型的概念——RBAC，目前产品大多都是采取RBAC模型进行一些个性化的拓展。&lt;/p>
&lt;h3 id="rbac模型">RBAC模型&lt;/h3>
&lt;p>RBAC——Role-Based Access Control，基于角色的访问控制，在用户（User）和权限（Permission）中引入角色（Role）概念，将权限与角色进行关联，再将角色赋予用户，这样在后期用户权限变化时，只需要在用户与角色之间进行变动，授权会更加灵活。&lt;/p>
&lt;p>RBAC根据复杂程度不同，又分为RBAC0、RBAC1、RBAC2和RBAC3，其中RBAC0是基础模型，其余三个都是以他为基础的扩展。&lt;/p>
&lt;h4 id="rbac0">RBAC0&lt;/h4>
&lt;p>RBAC0是最基础的权限模型，定义了构成一个RBAC权限控制的最小组成，其中包含四部分元素组成：&lt;/p>
&lt;ol>
&lt;li>用户User，U表示用户集&lt;/li>
&lt;li>角色Role，R表示角色集&lt;/li>
&lt;li>会话Session，S表示会话集&lt;/li>
&lt;li>权限Permission——包括操作Operation和操作的对象Object，P表示权限集&lt;/li>
&lt;/ol>
&lt;p>&lt;img src="https://i.loli.net/2019/01/19/5c42dcd98f0c0.png" alt="">&lt;/p>
&lt;p>其中&lt;/p>
&lt;ul>
&lt;li>用户与角色是多对多关系&lt;/li>
&lt;li>角色与权限是多对多关系&lt;/li>
&lt;li>用户与会话是一对一关系&lt;/li>
&lt;li>会话与角色是一对多关系&lt;/li>
&lt;/ul>
&lt;p>即当一个或多个角色分配给一个用户后，此用户就拥有了这个角色的所有权限，用户在创建会话后激活所拥有的一个或多个角色，获得相应的权限，从而有权进行许可范围内的操作。&lt;/p>
&lt;p>同理，一个角色也可以分配给多个用户，即相同角色的用户拥有相同的权限。&lt;/p>
&lt;p>由于RBAC0是最基础的权限模型，所以对于功能简单，使用人员较少，且岗位权限划分清晰的系统来说比较实用。&lt;/p>
&lt;h4 id="rbac1">RBAC1&lt;/h4>
&lt;p>在RBAC0基础上，将角色引入上下级，增加子角色，继承关系，就是RBAC1，&lt;strong>&lt;code>即子角色可以继承父角色的所有权限&lt;/code>&lt;/strong>。&lt;/p>
&lt;p>有了继承的概念，就有了上下级的包含关系，在业务上就可以利用这一特性，对有上下级之分的人员进行不同的角色分配。&lt;/p>
&lt;h4 id="rbac2">RBAC2&lt;/h4>
&lt;p>RBAC2是基于RBAC0进行扩展，增加了角色的**&lt;code>访问控制(SSD&amp;amp;DSD)&lt;/code>**&lt;/p>
&lt;ul>
&lt;li>
&lt;p>SSD静态职责分离&lt;/p>
&lt;ul>
&lt;li>互斥角色：同一个用户不能分配到一组互斥角色集合中的多个角色&lt;/li>
&lt;li>基数约束：一个角色只能被分配给有限数量的用户，一个用户可拥有的角色数量有限，同样一个角色对应的权限数量也应有限&lt;/li>
&lt;li>先决条件约束：用户想得到某一高级权限，必须首先拥有低级权限&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>
&lt;p>DSD动态职责分离&lt;/p>
&lt;p>例如，允许一个用户具有2个角色的权限信息，但在运行时只允许激活1个&lt;/p>
&lt;/li>
&lt;/ul>
&lt;h4 id="rbac3">RBAC3&lt;/h4>
&lt;p>它是最全面的权限管理，是基于RBAC0的基础上，将RBAC1和RBAC2进行整合，所以它**&lt;code>包含了RBAC0、RBAC1、RBAC2的所有特点&lt;/code>**。&lt;/p>
&lt;p>以上就是RBAC权限模型的简介，其实无论产品形态，业务复杂程度，最终都可以通过以RBAC模型为基础进行扩展，灵活运用解决我们的权限分配问题。&lt;/p>
&lt;h2 id="改造方案">改造方案&lt;/h2>
&lt;p>那回到我们的开始，了解了RBAC模型的概念后，再来看我们权限体系需要改进的地方：&lt;/p>
&lt;ul>
&lt;li>分割功能权限和数据权限，功能权限可体现在某一角色具体可视哪些导航菜单，可进行哪些操作，数据权限可提现在某一部门下的角色只能访问属于其对应部门下的数据/资源内容。&lt;/li>
&lt;li>之前采用的是RBAC0模型，随着用户、权限、角色的增加，越来越不便于管理，因此我们要在此RBAC权限模型基础上进行扩展，首先引入用户组(部门)信息，在角色/权限上引入上下级概念，便于各部门leader自行管理下属权限。&lt;/li>
&lt;li>原来角色的兼容，这部分不麻烦，新角色大部分权限与原来相同，再协商伙伴项目组对用户部门信息进行同步，对用户重新分配权限即可，同时针对每个部门的leader赋予相关的管理权限。&lt;/li>
&lt;li>重新设计前台权限管理模块，将原来的权限管理功能统一设计，优化使用、操作体验，由系统管理员、部门管理员进行访问控制&lt;/li>
&lt;li>其他开发上优化的地方……&lt;/li>
&lt;/ul>
&lt;h2 id="后续">后续&lt;/h2>
&lt;p>总结一下，权限需要修改其实很大程度在于当初的时候没有考虑到系统的扩展性，技术角度来讲重新设计和返工是很头疼的事情，但从产品、业务角度来讲，尽早考虑到后期系统的可扩展性是一件非常重要的事情，对于目前的权限系统，仍然保留了很多的可扩展性，只是根据当前的业务现状，暂时还不需要。&lt;/p></description></item><item><title>关于Blog</title><link>https://fishxy.github.io/post/diary/%E5%85%B3%E4%BA%8Eblog/</link><pubDate>Fri, 18 Jan 2019 00:00:00 +0000</pubDate><guid>https://fishxy.github.io/post/diary/%E5%85%B3%E4%BA%8Eblog/</guid><description>&lt;h2 id="关于这里">关于这里&lt;/h2>
&lt;p>自从删除了简书账号后，就一直没找到合适的地方码码字、写文章。&lt;/p>
&lt;p>今天体验了下blogger，总是觉得用着不够顺手，考虑过自己搭建个，技术水平也说得过去，但是想到维护还有服务器等等一系列成本，就放弃了，跑来试用了下，免费版的wordpress基本够我折腾得了（&lt;code>2019年03月10日 已经换到了自建的blog&lt;/code>）。后来想想，折腾了这么多地方，又是考虑成本，又是考虑搭建容易与否，又是考虑平台大小的，却忘了博客的本质——写，外部工具只是一个载体，呈现的方式，内容，想要书写的文字才是最重要的。&lt;/p>
&lt;h2 id="关于博客平台">关于博客&amp;amp;平台&lt;/h2>
&lt;p>最早接触博客，应该是QQ空间，那时候在里面写日志，在上面记录些生活、网上事情，好友之间互相留言，印象最深的是那个时候经常会写一些互相之间点名，被点到的要复制过来一次回答很多个问题，可能这是我最早接触的艾特和转载吧。印象最深的是百度hi空间，我的第一个百度账号，现在只呢记住用户名了，在那里我投入了很多精力，有事没事就在上面写些文章，记录了一些关于哪次考试成绩怎么样，也有喜欢哪个女生时的心思，记得当时还写了不少关于QQ三国的游戏经验，还被搜索引擎收录到排名挺靠前的，给当时的博客吸引了不少流量。&lt;/p>
&lt;p>那个时候没有关于流量、点击率、点赞数的概念，一心想着就是记录下生活，记录下想法。可随着可支配时间越来越少，对码字的欲望也渐渐降低，直到百度hi关闭后很长一段时间，我才想着试图去找回当年记录的文字，可惜密码早就忘掉了。&lt;/p>
&lt;h2 id="关于文字思考">关于文字&amp;amp;思考&lt;/h2>
&lt;p>我自知不是一个善于写作的人，只是喜欢不停的记录自己的想法，记录自己的文字。&lt;/p>
&lt;p>长时间没写博客的日子，是在QQ空间的说说上度过的，记得之前的名字是叫QQ心情，我就是在上面记录自己心情的，风格也经历过非主流、无病呻吟、火星文等等，想想自己都够羞耻的。再后来就是微信朋友圈，没有字数的限制，随时随地能够发表，让我好像找到了另一片乐土，每天都能发出很多动态刷屏，导致我接触微博的时候，无法接受只能输入140个字，经常因为文字太多发不了。&lt;/p>
&lt;p>正如之前说的，尝试了很多平台，适应各个产品的节奏，逐渐从长篇文章到接受碎片化的文字，慢慢的缺少了深度思考，慢慢的不再有输出的欲望。&lt;/p>
&lt;p>2019年1月18日，希望能继续找回码字的欲望，决定在这里好好写写、记录一点文字吧。&lt;/p></description></item></channel></rss>